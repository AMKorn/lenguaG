BODY -> DECLARATIONS MAIN.

MAIN -> main L_PAREN ARGS R_PAREN L_KEY INSTRUCTIONS R_KEY.

DECLARATIONS -> DECLARATION DECLARATIONS 
    | FUNCTION DECLARATIONS 
    | .

DECLARATION -> CONSTANT CONT_DECLARATION
    | CONT_DECLARATION.

CONT_DECLARATION ->	TYPE IDENTIFIER INITIALIZATION
    | TYPE IDENTIFIER.

CONSTANT -> val.

INITIALIZATION -> EQUAL VALUE.

FUNCTION -> TYPE IDENTIFIER L_PAREN ARGS R_PAREN L_KEY INSTRUCTIONS R_KEY.

ARGS -> ARG MORE_ARGS
    | .

MORE_ARGS -> COMMA ARG
    | .

INSTRUCTIONS -> INSTRUCTION INSTRUCTIONS
    | .

INSTRUCTION -> DECLARATION ENDLINE
    | ASSIGNATION ENDLINE
    | SWAP ENDLINE
    | FUNCTION_CALL ENDLINE
    | RETURN ENDLINE
    | IF
    | LOOP
    | FOR.

ASSIGNATION -> IDENTIFIER EQUAL OPERATION 
    | IDENTIFIER EQUAL VALUE.

SWAP -> IDENTIFIER <<>> IDENTIFIER.

VALUE -> IDENTIFIER
    | L_PAREN VALUE R_PAREN
    | L_PAREN OPERATION R_PAREN
    | NOT VALUE.

OPERATION -> VALUE ADDITION
    | VALUE SUBSTRACTION
    | VALUE PRODUCT
    | VALUE DIVISION
    | VALUE MODULE
    | VALUE OR
    | VALUE AND
    | VALUE OP_REL.

ADDITION -> + VALUE.

SUBSTRACTION -> - VALUE.

PRODUCT -> * VALUE.

DIVISION -> / VALUE.

MODULE -> % VALUE.

OR -> or VALUE.

AND -> and VALUE.

OP_REL -> EQUALS
    | BIGGER
    | BEQ
    | LESSER
    | LEQ
    | NEQ.

EQUALS -> == VALUE.

BIGGER -> > VALUE.

BEQ -> >= VALUE.

LESSER -> < VALUE.

LEQ -> <= VALUE.

NEQ -> != VALUE.

IDENTIFIER -> VARIABLE
    | FIXED_VALUE
    | FUNCTION_CALL.

VARIABLE -> [a-zA-Z_][a-zA-Z0-9_]* ARRAY_SUFFIX.
ARRAY_SUFFIX -> L_BRACKET IDENTIFIER R_BRACKET.

FIXED_VALUE -> INTEGER
    | CHARACTER
    | LIST
    | BOOLEAN.

TYPE -> TYPE_INTEGER
    | TYPE_CHARACTER
    | TYPE_BOOLEAN
    | TYPE_ARRAY.
	
TYPE_INTEGER -> int.
TYPE_CHARACTER -> char.
TYPE_BOOLEAN -> boolean.
TYPE_ARRAY -> TYPE L_BRACKET IDENTIFIER R_BRACKET.

CONDITION -> VALUE
    | OPERATION.

IF -> if L_PAREN CONDITION R_PAREN L_KEY INSTRUCTIONS R_KEY ELSE.
ELSE -> else if L_PAREN CONDITION R_PAREN L_KEY INSTRUCTIONS R_KEY ELSE
    | else L_KEY CONDITION R_KEY.

LOOP -> while L_PAREN CONDITION R_PAREN L_KEY INSTRUCTIONS R_KEY.

FOR -> FOR_HEADER L_KEY INSTRUCTIONS R_KEY.

FOR_HEADER -> for L_PAREN HEADER_SEGMENT ENDLINE CONDITION ENDLINE HEADER_SEGMENT R_PAREN.

HEADER_SEGMENT -> DECLARATION 
    | ASSIGNATION 
    | SWAP 
    | FUNCTION_CALL. # Quitar si no implementamos pasar por referencia

FUNCTION_CALL -> IDENTIFIER L_PAREN ARGS R_PAREN.

RETURN -> return VALUE
    | return OPERATION
    | return.