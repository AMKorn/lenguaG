BODY -> DECLARATIONS MAIN.

MAIN -> main L_PAREN ARGS R_PAREN L_KEY INSTRUCTIONS R_KEY.

DECLARATIONS -> DECLARATION ENDLINE DECLARATIONS 
    | FUNCTION DECLARATIONS 
    | .

DECLARATION -> CONSTANT CONT_DECLARATION
    | CONT_DECLARATION.

CONT_DECLARATION ->	TYPE VARIABLE EQUAL EXPRESSION
    | TYPE VARIABLE EQUAL OPERATION
    | TYPE VARIABLE.

FUNCTION -> TYPE VARIABLE L_PAREN ARGS R_PAREN L_KEY INSTRUCTIONS R_KEY.

ARGS -> ARG MORE_ARGS
    | .

MORE_ARGS -> COMMA ARG MORE_ARGS
    | .

ARG -> TYPE VARIABLE.

INSTRUCTIONS -> INSTRUCTION INSTRUCTIONS
    | .

INSTRUCTION -> DECLARATION ENDLINE
    | ASSIGNATION ENDLINE
    | SWAP ENDLINE
    | FUNCTION_CALL ENDLINE
    | RETURN ENDLINE
    | IF
    | LOOP
    | FOR
    | IN ENDLINE
    | OUT ENDLINE.

ASSIGNATION -> VARIABLE EQUAL OPERATION 
    | VARIABLE EQUAL EXPRESSION.

SWAP -> VARIABLE <<>> VARIABLE.

EXPRESSION -> VALUE
    | L_PAREN EXPRESSION R_PAREN
    | L_PAREN OPERATION R_PAREN
    | NOT EXPRESSION.

OPERATION -> EXPRESSION OP EXPRESSION.

OP -> ADDITION
    | SUBSTRACTION
    | PRODUCT
    | DIVISION
    | MODULE
    | OR
    | AND
    | OP_REL.

OP_REL -> IS_EQUAL
    | BIGGER
    | BEQ
    | LESSER
    | LEQ
    | NEQ.

VALUE -> VARIABLE
    | FIXED_VALUE
    | FUNCTION_CALL.

VARIABLE -> IDENTIFIER ARRAY_SUFFIX.

ARRAY_SUFFIX -> L_BRACKET VARIABLE R_BRACKET ARRAY_SUFFIX # variable must be integer
    | .

FIXED_VALUE -> INTEGER
    | FLOAT
    | CHARACTER
    | LIST
    | BOOLEAN.

TYPE -> TYPE_INTEGER
    | TYPE_FLOAT
    | TYPE_CHARACTER
    | TYPE_BOOLEAN
    | TYPE L_BRACKET R_BRACKET
    | VOID.

LIST -> L_BRACKET VALUE CONT_LIST.
CONT_LIST -> COMMA VALUE CONT_LIST
    | R_BRACKET.

CONDITION -> EXPRESSION
    | OPERATION.

IF -> if L_PAREN CONDITION R_PAREN L_KEY INSTRUCTIONS R_KEY ELSE.
ELSE -> else IF
    | else L_KEY INSTRUCTIONS R_KEY
    | .

LOOP -> while L_PAREN CONDITION R_PAREN L_KEY INSTRUCTIONS R_KEY.

FOR -> for L_PAREN HEADER_SEGMENT ENDLINE CONDITION ENDLINE HEADER_SEGMENT R_PAREN L_KEY INSTRUCTIONS R_KEY.

# FOR_HEADER -> for L_PAREN HEADER_SEGMENT ENDLINE CONDITION ENDLINE HEADER_SEGMENT R_PAREN.

HEADER_SEGMENT -> DECLARATION 
    | ASSIGNATION 
    | SWAP 
    | FUNCTION_CALL. # Quitar si no implementamos pasar por referencia

FUNCTION_CALL -> VARIABLE L_PAREN PARAMS R_PAREN.

PARAMS -> VALUE MORE_PARAMS
    | .

MORE_PARAMS -> COMMA VALUE MORE_PARAMS
    | .

# PARAM -> VALUE.

RETURN -> return EXPRESSION
    | return OPERATION
    | return.

IN -> in L_PAREN VARIABLE R_PAREN.

OUT -> out L_PAREN VALUE R_PAREN.