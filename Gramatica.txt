BODY -> DECLARATIONS MAIN.

MAIN -> main L_PAREN ARGS R_PAREN L_KEY INSTRUCTIONS R_KEY.

DECLARATIONS -> DECLARATION DECLARATIONS 
    | FUNCTION DECLARATIONS 
    | .

DECLARATION -> CONSTANT CONT_DECLARATION
    | CONT_DECLARATION.

CONT_DECLARATION ->	TYPE VARIABLE INITIALIZATION
    | TYPE VARIABLE.

CONSTANT -> val.

INITIALIZATION -> EQUAL EXPRESSION.

FUNCTION -> TYPE VARIABLE L_PAREN ARGS R_PAREN L_KEY INSTRUCTIONS R_KEY.

ARGS -> ARG MORE_ARGS
    | .

MORE_ARGS -> COMMA ARG
    | .

ARG -> TYPE VARIABLE.

INSTRUCTIONS -> INSTRUCTION INSTRUCTIONS
    | .

INSTRUCTION -> DECLARATION ENDLINE
    | ASSIGNATION ENDLINE
    | SWAP ENDLINE
    | FUNCTION_CALL ENDLINE
    | RETURN ENDLINE
    | IF
    | LOOP
    | FOR
    | IN
    | OUT.

ASSIGNATION -> VARIABLE EQUAL OPERATION 
    | VARIABLE EQUAL EXPRESSION.

SWAP -> VARIABLE <<>> VARIABLE.

EXPRESSION -> VALUE
    | L_PAREN EXPRESSION R_PAREN
    | L_PAREN OPERATION R_PAREN
    | NOT EXPRESSION.

OPERATION -> EXPRESSION ADDITION
    | EXPRESSION SUBSTRACTION
    | EXPRESSION PRODUCT
    | EXPRESSION DIVISION
    | EXPRESSION MODULE
    | EXPRESSION OR
    | EXPRESSION AND
    | EXPRESSION OP_REL.

ADDITION -> + EXPRESSION.

SUBSTRACTION -> - EXPRESSION.

PRODUCT -> * EXPRESSION.

DIVISION -> / EXPRESSION.

MODULE -> % EXPRESSION.

OR -> or EXPRESSION.

AND -> and EXPRESSION.

OP_REL -> EQUALS
    | BIGGER
    | BEQ
    | LESSER
    | LEQ
    | NEQ.

EQUALS -> == EXPRESSION.

BIGGER -> > EXPRESSION.

BEQ -> >= EXPRESSION.

LESSER -> < EXPRESSION.

LEQ -> <= EXPRESSION.

NEQ -> != EXPRESSION.

VALUE -> VARIABLE
    | FIXED_VALUE
    | FUNCTION_CALL.

VARIABLE -> IDENTIFIER ARRAY_SUFFIX.

ARRAY_SUFFIX -> L_BRACKET VARIABLE R_BRACKET ARRAY_SUFFIX # variable must be integer
    | .

FIXED_VALUE -> INTEGER
    | CHARACTER
    | LIST
    | BOOLEAN.

TYPE -> TYPE_INTEGER ARRAY_SUFFIX
    | TYPE_FLOAT ARRAY_SUFFIX
    | TYPE_CHARACTER ARRAY_SUFFIX
    | TYPE_BOOLEAN ARRAY_SUFFIX.

LIST -> L_BRACKET VALUE CONT_LIST.
CONT_LIST -> COMMA VALUE CONT_LIST
    | R_BRACKET.

CONDITION -> EXPRESSION
    | OPERATION.

IF -> if L_PAREN CONDITION R_PAREN L_KEY INSTRUCTIONS R_KEY ELSE.
ELSE -> else if L_PAREN CONDITION R_PAREN L_KEY INSTRUCTIONS R_KEY ELSE
    | else L_KEY CONDITION R_KEY
    | .

LOOP -> while L_PAREN CONDITION R_PAREN L_KEY INSTRUCTIONS R_KEY.

FOR -> FOR_HEADER L_KEY INSTRUCTIONS R_KEY.

FOR_HEADER -> for L_PAREN HEADER_SEGMENT ENDLINE CONDITION ENDLINE HEADER_SEGMENT R_PAREN.

HEADER_SEGMENT -> DECLARATION 
    | ASSIGNATION 
    | SWAP 
    | FUNCTION_CALL. # Quitar si no implementamos pasar por referencia

FUNCTION_CALL -> VARIABLE L_PAREN PARAMS R_PAREN.

PARAMS -> PARAM MORE_PARAMS
    | .

MORE_PARAMS -> COMMA PARAM
    | .

PARAM -> VALUE.

RETURN -> return EXPRESSION
    | return OPERATION
    | return.

IN -> in L_PAREN PARAM R_PAREN.

OUT -> out L_PAREN PARAM R_PAREN.