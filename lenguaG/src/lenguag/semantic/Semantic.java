package lenguag.semantic;

import lenguag.syntactic.symbols.*;

public class Semantic {
    
    public SymbolTable symbolTable;

    public Semantic(){
        symbolTable = new SymbolTable();
    }

    /**
     * Starts the semantic analysis. There should be no possible errors in this symbol if syntactical analysis was correct.
     * Body -> Declarations Main
     * @param body - The root node of what should be the whole tree generated by the parser.
     */
    public void manage(SymbolBody body){
        SymbolDecs decs = body.getDeclarations();
        if(decs != null) manage(decs);
        SymbolMain main = body.getMain();
        manage(main);
    }
    
    private void manage(SymbolArg arg){
        // TODO
    }

    private void manage(SymbolArgs args){
        // TODO
    }

    private void manage(SymbolArrSuff arrSuff){
        // TODO
    }

    private void manage(SymbolAssign assign){
        // TODO
    }

    private void manage(SymbolDec dec){
        // TODO
    }

    private void manage(SymbolDecs decs){
        // TODO
    }

    private void manage(SymbolElse sElse){
        // TODO
    }

    private void manage(SymbolFor sFor){
        // TODO
    }

    private void manage(SymbolFunc func){
        // TODO
    }

    private void manage(SymbolFuncCall functionCall){
        // TODO
    }

    private void manage(SymbolIf sIf){
        // TODO
    }

    private void manage(SymbolIn in){
        // TODO
    }

    private void manage(SymbolInstr instruction){
        // TODO
    }

    private void manage(SymbolInstrs instructions){
        // TODO
    }

    private void manage(SymbolList list){
        // TODO
    }

    private void manage(SymbolLoop loop){
        // TODO
    }

    private void manage(SymbolMain main){
        // TODO
    }

    private void manage(SymbolOp op){
        // TODO
    }

    private void manage(SymbolOperand operand){
        // TODO
    }

    private void manage(SymbolOperation operation){
        // TODO
    }

    private void manage(SymbolOut out){
        // TODO
    }

    private void manage(SymbolParams params){
        // TODO
    }

    private void manage(SymbolReturn sReturn){
        // TODO
    }

    private void manage(SymbolSwap swap){
        // TODO
    }

    private void manage(SymbolType type){
        // TODO
    }

    private void manage(SymbolValue value){
        // TODO
    }

    private void manage(SymbolVar var){
        // TODO
    }

}
