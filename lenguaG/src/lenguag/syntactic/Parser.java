
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package lenguag.syntactic;

import lenguag.syntactic.symbols.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\002\004\000\002\006" +
    "\011\000\002\003\005\000\002\003\004\000\002\003\002" +
    "\000\002\004\004\000\002\004\003\000\002\005\006\000" +
    "\002\005\004\000\002\014\012\000\002\007\004\000\002" +
    "\007\002\000\002\010\005\000\002\010\002\000\002\011" +
    "\004\000\002\012\004\000\002\012\002\000\002\013\004" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\013\004\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\004\000\002\013\004\000\002\017" +
    "\005\000\002\020\005\000\002\024\005\000\002\024\003" +
    "\000\002\025\003\000\002\025\005\000\002\025\004\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\016\004\000\002\032\006\000\002\032" +
    "\002\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\005\000\002" +
    "\033\005\000\002\034\005\000\002\034\003\000\002\035" +
    "\012\000\002\036\004\000\002\036\006\000\002\036\002" +
    "\000\002\037\011\000\002\040\015\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\041\006\000\002\042\004\000\002\042\002\000\002\043" +
    "\005\000\002\043\002\000\002\021\004\000\002\021\003" +
    "\000\002\022\006\000\002\023\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\016\004\ufffc\005\004\007\011\010\012\011" +
    "\016\013\015\001\002\000\012\007\011\010\012\011\016" +
    "\013\015\001\002\000\006\024\ufffa\033\ufffa\001\002\000" +
    "\004\004\240\001\002\000\004\002\236\001\002\000\006" +
    "\027\022\052\023\001\002\000\006\027\uffc6\052\uffc6\001" +
    "\002\000\006\027\uffc5\052\uffc5\001\002\000\004\033\020" +
    "\001\002\000\016\004\ufffc\005\004\007\011\010\012\011" +
    "\016\013\015\001\002\000\006\027\uffc3\052\uffc3\001\002" +
    "\000\006\027\uffc4\052\uffc4\001\002\000\004\004\ufffd\001" +
    "\002\000\016\004\ufffc\005\004\007\011\010\012\011\016" +
    "\013\015\001\002\000\004\004\ufffe\001\002\000\004\030" +
    "\235\001\002\000\054\023\uffcb\024\uffcb\027\231\030\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037" +
    "\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\051\uffcb\001\002\000\010\023" +
    "\026\031\025\033\ufff8\001\002\000\020\006\077\023\076" +
    "\027\071\052\023\053\067\054\070\055\072\001\002\000" +
    "\014\007\011\010\012\011\016\013\015\024\ufff5\001\002" +
    "\000\004\024\037\001\002\000\006\024\ufff3\032\034\001" +
    "\002\000\006\027\022\052\023\001\002\000\006\024\ufff2" +
    "\032\ufff2\001\002\000\004\024\ufff6\001\002\000\012\007" +
    "\011\010\012\011\016\013\015\001\002\000\006\024\ufff3" +
    "\032\034\001\002\000\004\024\ufff4\001\002\000\004\025" +
    "\040\001\002\000\034\005\004\007\011\010\012\011\016" +
    "\013\015\014\056\016\045\017\055\020\061\021\052\022" +
    "\054\026\ufff0\052\023\001\002\000\004\033\226\001\002" +
    "\000\034\005\uffe9\007\uffe9\010\uffe9\011\uffe9\013\uffe9\014" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\026\uffe9" +
    "\052\uffe9\001\002\000\004\033\225\001\002\000\004\033" +
    "\224\001\002\000\004\023\216\001\002\000\010\023\127" +
    "\031\213\034\212\001\002\000\034\005\uffea\007\uffea\010" +
    "\uffea\011\uffea\013\uffea\014\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\026\uffea\052\uffea\001\002\000\004\026" +
    "\211\001\002\000\006\027\022\052\023\001\002\000\004" +
    "\023\205\001\002\000\034\005\004\007\011\010\012\011" +
    "\016\013\015\014\056\016\045\017\055\020\061\021\052" +
    "\022\054\026\ufff0\052\023\001\002\000\004\023\201\001" +
    "\002\000\004\023\163\001\002\000\004\023\147\001\002" +
    "\000\004\033\146\001\002\000\004\033\145\001\002\000" +
    "\022\006\077\023\076\027\071\033\uffae\052\023\053\067" +
    "\054\070\055\072\001\002\000\004\033\066\001\002\000" +
    "\034\005\uffe8\007\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8" +
    "\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\026\uffe8\052" +
    "\uffe8\001\002\000\004\033\065\001\002\000\034\005\uffed" +
    "\007\uffed\010\uffed\011\uffed\013\uffed\014\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\026\uffed\052\uffed\001\002" +
    "\000\034\005\uffe6\007\uffe6\010\uffe6\011\uffe6\013\uffe6\014" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\026\uffe6" +
    "\052\uffe6\001\002\000\044\024\uffca\030\uffca\032\uffca\033" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca" +
    "\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051" +
    "\uffca\001\002\000\044\024\uffc9\030\uffc9\032\uffc9\033\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043" +
    "\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9" +
    "\001\002\000\020\006\077\023\076\027\071\052\023\053" +
    "\067\054\070\055\072\001\002\000\044\024\uffc7\030\uffc7" +
    "\032\uffc7\033\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7" +
    "\050\uffc7\051\uffc7\001\002\000\046\023\127\024\uffd0\030" +
    "\uffd0\032\uffd0\033\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047" +
    "\uffd0\050\uffd0\051\uffd0\001\002\000\044\024\uffe1\030\uffe1" +
    "\032\uffe1\033\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1" +
    "\050\uffe1\051\uffe1\001\002\000\044\024\uffc8\030\uffc8\032" +
    "\uffc8\033\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8" +
    "\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050" +
    "\uffc8\051\uffc8\001\002\000\020\006\077\023\076\027\071" +
    "\052\023\053\067\054\070\055\072\001\002\000\020\006" +
    "\077\023\076\027\071\052\023\053\067\054\070\055\072" +
    "\001\002\000\004\033\uffaf\001\002\000\044\024\uffe2\030" +
    "\uffe2\032\uffe2\033\uffe2\035\114\036\116\037\115\040\117" +
    "\041\111\042\121\043\104\044\112\045\106\046\120\047" +
    "\110\050\122\051\113\001\002\000\044\024\uffcf\030\uffcf" +
    "\032\uffcf\033\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\050\uffcf\051\uffcf\001\002\000\044\024\uffce\030\uffce\032" +
    "\uffce\033\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050" +
    "\uffce\051\uffce\001\002\000\020\006\uffd8\023\uffd8\027\uffd8" +
    "\052\uffd8\053\uffd8\054\uffd8\055\uffd8\001\002\000\020\006" +
    "\077\023\076\027\071\052\023\053\067\054\070\055\072" +
    "\001\002\000\020\006\uffd5\023\uffd5\027\uffd5\052\uffd5\053" +
    "\uffd5\054\uffd5\055\uffd5\001\002\000\020\006\uffd7\023\uffd7" +
    "\027\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\001\002\000" +
    "\020\006\uffd3\023\uffd3\027\uffd3\052\uffd3\053\uffd3\054\uffd3" +
    "\055\uffd3\001\002\000\020\006\uffda\023\uffda\027\uffda\052" +
    "\uffda\053\uffda\054\uffda\055\uffda\001\002\000\020\006\uffd6" +
    "\023\uffd6\027\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\001" +
    "\002\000\020\006\uffd1\023\uffd1\027\uffd1\052\uffd1\053\uffd1" +
    "\054\uffd1\055\uffd1\001\002\000\020\006\uffde\023\uffde\027" +
    "\uffde\052\uffde\053\uffde\054\uffde\055\uffde\001\002\000\020" +
    "\006\uffdc\023\uffdc\027\uffdc\052\uffdc\053\uffdc\054\uffdc\055" +
    "\uffdc\001\002\000\020\006\uffdd\023\uffdd\027\uffdd\052\uffdd" +
    "\053\uffdd\054\uffdd\055\uffdd\001\002\000\020\006\uffdb\023" +
    "\uffdb\027\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\001\002" +
    "\000\020\006\uffd4\023\uffd4\027\uffd4\052\uffd4\053\uffd4\054" +
    "\uffd4\055\uffd4\001\002\000\020\006\uffd9\023\uffd9\027\uffd9" +
    "\052\uffd9\053\uffd9\054\uffd9\055\uffd9\001\002\000\020\006" +
    "\uffd2\023\uffd2\027\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2" +
    "\001\002\000\012\024\uffe3\030\uffe3\032\uffe3\033\uffe3\001" +
    "\002\000\044\024\uffdf\030\uffdf\032\uffdf\033\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044" +
    "\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\001\002" +
    "\000\004\024\126\001\002\000\044\024\uffe0\030\uffe0\032" +
    "\uffe0\033\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050" +
    "\uffe0\051\uffe0\001\002\000\016\024\uffb2\027\071\052\023" +
    "\053\067\054\070\055\072\001\002\000\004\024\136\001" +
    "\002\000\006\024\uffb0\032\132\001\002\000\014\027\071" +
    "\052\023\053\067\054\070\055\072\001\002\000\004\024" +
    "\uffb3\001\002\000\006\024\uffb0\032\132\001\002\000\004" +
    "\024\uffb1\001\002\000\044\024\uffb4\030\uffb4\032\uffb4\033" +
    "\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051" +
    "\uffb4\001\002\000\006\030\140\032\141\001\002\000\044" +
    "\024\uffbf\030\uffbf\032\uffbf\033\uffbf\035\uffbf\036\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\051\uffbf\001\002\000\014\027" +
    "\071\052\023\053\067\054\070\055\072\001\002\000\044" +
    "\024\uffc1\030\uffc1\032\uffc1\033\uffc1\035\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1" +
    "\046\uffc1\047\uffc1\050\uffc1\051\uffc1\001\002\000\006\030" +
    "\140\032\141\001\002\000\044\024\uffc0\030\uffc0\032\uffc0" +
    "\033\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0" +
    "\051\uffc0\001\002\000\034\005\uffee\007\uffee\010\uffee\011" +
    "\uffee\013\uffee\014\uffee\016\uffee\017\uffee\020\uffee\021\uffee" +
    "\022\uffee\026\uffee\052\uffee\001\002\000\034\005\uffef\007" +
    "\uffef\010\uffef\011\uffef\013\uffef\014\uffef\016\uffef\017\uffef" +
    "\020\uffef\021\uffef\022\uffef\026\uffef\052\uffef\001\002\000" +
    "\020\006\077\023\076\027\071\052\023\053\067\054\070" +
    "\055\072\001\002\000\004\024\151\001\002\000\004\025" +
    "\152\001\002\000\034\005\004\007\011\010\012\011\016" +
    "\013\015\014\056\016\045\017\055\020\061\021\052\022" +
    "\054\026\ufff0\052\023\001\002\000\004\026\154\001\002" +
    "\000\036\005\uffbb\007\uffbb\010\uffbb\011\uffbb\013\uffbb\014" +
    "\uffbb\015\156\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb" +
    "\026\uffbb\052\uffbb\001\002\000\034\005\uffbe\007\uffbe\010" +
    "\uffbe\011\uffbe\013\uffbe\014\uffbe\016\uffbe\017\uffbe\020\uffbe" +
    "\021\uffbe\022\uffbe\026\uffbe\052\uffbe\001\002\000\006\014" +
    "\056\025\157\001\002\000\034\005\004\007\011\010\012" +
    "\011\016\013\015\014\056\016\045\017\055\020\061\021" +
    "\052\022\054\026\ufff0\052\023\001\002\000\034\005\uffbd" +
    "\007\uffbd\010\uffbd\011\uffbd\013\uffbd\014\uffbd\016\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\026\uffbd\052\uffbd\001\002" +
    "\000\004\026\162\001\002\000\034\005\uffbc\007\uffbc\010" +
    "\uffbc\011\uffbc\013\uffbc\014\uffbc\016\uffbc\017\uffbc\020\uffbc" +
    "\021\uffbc\022\uffbc\026\uffbc\052\uffbc\001\002\000\016\005" +
    "\004\007\011\010\012\011\016\013\015\052\023\001\002" +
    "\000\004\033\171\001\002\000\006\024\uffb6\033\uffb6\001" +
    "\002\000\006\024\uffb7\033\uffb7\001\002\000\006\024\uffb8" +
    "\033\uffb8\001\002\000\006\024\uffb5\033\uffb5\001\002\000" +
    "\020\006\077\023\076\027\071\052\023\053\067\054\070" +
    "\055\072\001\002\000\004\033\173\001\002\000\016\005" +
    "\004\007\011\010\012\011\016\013\015\052\023\001\002" +
    "\000\004\024\175\001\002\000\004\025\176\001\002\000" +
    "\034\005\004\007\011\010\012\011\016\013\015\014\056" +
    "\016\045\017\055\020\061\021\052\022\054\026\ufff0\052" +
    "\023\001\002\000\004\026\200\001\002\000\034\005\uffb9" +
    "\007\uffb9\010\uffb9\011\uffb9\013\uffb9\014\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\022\uffb9\026\uffb9\052\uffb9\001\002" +
    "\000\014\027\071\052\023\053\067\054\070\055\072\001" +
    "\002\000\004\024\203\001\002\000\004\033\uffac\001\002" +
    "\000\004\026\ufff1\001\002\000\004\052\023\001\002\000" +
    "\004\024\207\001\002\000\004\033\uffad\001\002\000\010" +
    "\024\ufff8\031\025\033\ufff8\001\002\000\016\004\ufff7\005" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\013\ufff7\001\002\000\004" +
    "\052\023\001\002\000\020\006\077\023\076\027\071\052" +
    "\023\053\067\054\070\055\072\001\002\000\006\024\uffe5" +
    "\033\uffe5\001\002\000\006\024\uffe4\033\uffe4\001\002\000" +
    "\020\006\077\023\076\027\071\052\023\053\067\054\070" +
    "\055\072\001\002\000\004\024\220\001\002\000\004\025" +
    "\221\001\002\000\034\005\004\007\011\010\012\011\016" +
    "\013\015\014\056\016\045\017\055\020\061\021\052\022" +
    "\054\026\ufff0\052\023\001\002\000\004\026\223\001\002" +
    "\000\034\005\uffba\007\uffba\010\uffba\011\uffba\013\uffba\014" +
    "\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\026\uffba" +
    "\052\uffba\001\002\000\034\005\uffec\007\uffec\010\uffec\011" +
    "\uffec\013\uffec\014\uffec\016\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\026\uffec\052\uffec\001\002\000\034\005\uffeb\007" +
    "\uffeb\010\uffeb\011\uffeb\013\uffeb\014\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\026\uffeb\052\uffeb\001\002\000" +
    "\034\005\uffe7\007\uffe7\010\uffe7\011\uffe7\013\uffe7\014\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\026\uffe7\052" +
    "\uffe7\001\002\000\006\024\ufff9\033\ufff9\001\002\000\052" +
    "\023\uffcd\024\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\001\002\000\004\052\023\001\002\000\004\030\233" +
    "\001\002\000\054\023\uffcb\024\uffcb\027\231\030\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046" +
    "\uffcb\047\uffcb\050\uffcb\051\uffcb\001\002\000\052\023\uffcc" +
    "\024\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\001" +
    "\002\000\006\027\uffc2\052\uffc2\001\002\000\004\002\001" +
    "\001\002\000\004\002\000\001\002\000\004\023\241\001" +
    "\002\000\014\007\011\010\012\011\016\013\015\024\ufff5" +
    "\001\002\000\004\024\243\001\002\000\004\025\244\001" +
    "\002\000\034\005\004\007\011\010\012\011\016\013\015" +
    "\014\056\016\045\017\055\020\061\021\052\022\054\026" +
    "\ufff0\052\023\001\002\000\004\026\246\001\002\000\004" +
    "\002\uffff\001\002\000\006\024\ufffb\033\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\016\002\006\003\005\004\012\005\004\014" +
    "\013\015\007\001\001\000\006\005\246\015\050\001\001" +
    "\000\002\001\001\000\004\006\236\001\001\000\002\001" +
    "\001\000\004\016\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\016\004\012\005" +
    "\004\014\013\015\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\020\004\012\005" +
    "\004\014\013\015\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\227\001\001\000\002\001\001\000" +
    "\020\016\072\024\226\025\100\026\073\031\101\033\074" +
    "\041\102\001\001\000\010\007\026\011\027\015\030\001" +
    "\001\000\002\001\001\000\004\010\032\001\001\000\004" +
    "\016\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\034\015\030\001\001\000\004\010\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\056\005" +
    "\004\012\047\013\052\015\050\016\045\017\057\020\063" +
    "\021\042\022\040\023\061\035\046\037\041\040\062\041" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\207" +
    "\001\001\000\002\001\001\000\040\004\056\005\004\012" +
    "\203\013\052\015\050\016\045\017\057\020\063\021\042" +
    "\022\040\023\061\035\046\037\041\040\062\041\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\016\072\024" +
    "\077\025\100\026\073\031\101\033\074\041\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\016\072\024\136\025\100\026\073\031" +
    "\101\033\074\041\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\016" +
    "\072\024\124\025\100\026\073\031\101\033\074\041\102" +
    "\001\001\000\016\016\072\025\123\026\073\031\101\033" +
    "\074\041\102\001\001\000\002\001\001\000\006\027\104" +
    "\030\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\016\072\025\122\026\073\031\101" +
    "\033\074\041\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\016\072" +
    "\026\130\031\101\033\074\041\102\042\127\001\001\000" +
    "\002\001\001\000\004\043\132\001\001\000\014\016\072" +
    "\026\133\031\101\033\074\041\102\001\001\000\002\001" +
    "\001\000\004\043\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\141\001\001\000\002\001\001\000" +
    "\014\016\072\026\142\031\101\033\074\041\102\001\001" +
    "\000\002\001\001\000\004\034\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\072" +
    "\024\147\025\100\026\073\031\101\033\074\041\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\056" +
    "\005\004\012\152\013\052\015\050\016\045\017\057\020" +
    "\063\021\042\022\040\023\061\035\046\037\041\040\062" +
    "\041\043\001\001\000\002\001\001\000\004\036\154\001" +
    "\001\000\002\001\001\000\004\035\157\001\001\000\040" +
    "\004\056\005\004\012\160\013\052\015\050\016\045\017" +
    "\057\020\063\021\042\022\040\023\061\035\046\037\041" +
    "\040\062\041\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\166\005\004\015\050" +
    "\016\045\017\165\020\164\041\167\044\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\016\072\024\171\025" +
    "\100\026\073\031\101\033\074\041\102\001\001\000\002" +
    "\001\001\000\022\004\166\005\004\015\050\016\045\017" +
    "\165\020\164\041\167\044\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\056\005\004\012\176\013" +
    "\052\015\050\016\045\017\057\020\063\021\042\022\040" +
    "\023\061\035\046\037\041\040\062\041\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\016\072\026\201" +
    "\031\101\033\074\041\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\214\001\001\000\020\016\072" +
    "\024\213\025\100\026\073\031\101\033\074\041\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\072" +
    "\024\216\025\100\026\073\031\101\033\074\041\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\056" +
    "\005\004\012\221\013\052\015\050\016\045\017\057\020" +
    "\063\021\042\022\040\023\061\035\046\037\041\040\062" +
    "\041\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\231\001\001\000" +
    "\002\001\001\000\004\032\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\241\011\027\015\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\056\005" +
    "\004\012\244\013\052\015\050\016\045\017\057\020\063" +
    "\021\042\022\040\023\061\035\046\037\041\040\062\041" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /**
     * error treatment methods override 
     **/

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        report_error("Catastrophical syntactical error", cur_token);
        done_parsing();        
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        report_error("Syntactical error", cur_token);
    }

    @Override
    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder("ERROR");
        if (info instanceof Symbol) {
            ComplexSymbol token = (ComplexSymbol)info;
            Location l = token.getLeft();
            
            if (l != null) {
                msg.append(" (fila: ")
                   .append(l.getLine())
                   .append(", columna: ")
                   .append(l.getColumn())
                   .append(")");
            }
        }
        msg.append(": ").append(message);
        
        System.err.println(msg);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Catastrophical error ("+message+")", info);
        done_parsing();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= BODY EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolBody start_val = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // BODY ::= DECLARATIONS MAIN 
            {
              SymbolBody RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolDecs v1 = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolMain v2 = (SymbolMain)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBody(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAIN ::= RES_MAIN L_PAREN ARGS R_PAREN L_KEY INSTRUCTIONS R_KEY 
            {
              SymbolMain RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolArgs v1 = (SymbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolInstrs v2 = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolMain(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARATIONS ::= DECLARATION ENDLINE DECLARATIONS 
            {
              SymbolDecs RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolDec v1 = (SymbolDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDecs v2 = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecs(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARATIONS ::= FUNCTION DECLARATIONS 
            {
              SymbolDecs RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFunc v1 = (SymbolFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDecs v2 = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecs(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARATIONS ::= 
            {
              SymbolDecs RESULT =null;
		 RESULT = new SymbolDecs(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARATION ::= CONSTANT CONT_DECLARATION 
            {
              SymbolDec RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDecCont v = (SymbolDecCont)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDec(v, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARATION ::= CONT_DECLARATION 
            {
              SymbolDec RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDecCont v = (SymbolDecCont)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDec(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONT_DECLARATION ::= TYPE VARIABLE EQUAL OPERATION 
            {
              SymbolDecCont RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolType v1 = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolVar v2 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperation v3 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecCont(v1, v2, v3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_DECLARATION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONT_DECLARATION ::= TYPE VARIABLE 
            {
              SymbolDecCont RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolType v1 = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolVar v2 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecCont(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_DECLARATION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCTION ::= TYPE VARIABLE L_PAREN ARGS R_PAREN L_KEY INSTRUCTIONS R_KEY 
            {
              SymbolFunc RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		SymbolType v1 = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolVar v2 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolArgs v3 = (SymbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolInstrs v4 = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolFunc(v1, v2, v3, v4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ARGS ::= ARG MORE_ARGS 
            {
              SymbolArgs RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolArg v1 = (SymbolArg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArgs v2 = (SymbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArgs(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ARGS ::= 
            {
              SymbolArgs RESULT =null;
		 RESULT = new SymbolArgs(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MORE_ARGS ::= COMMA ARG MORE_ARGS 
            {
              SymbolArgs RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolArg v1 = (SymbolArg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArgs v2 = (SymbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArgs(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MORE_ARGS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MORE_ARGS ::= 
            {
              SymbolArgs RESULT =null;
		 RESULT = new SymbolArgs(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MORE_ARGS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARG ::= TYPE VARIABLE 
            {
              SymbolArg RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolType v1 = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolVar v2 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArg(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCTIONS ::= INSTRUCTION INSTRUCTIONS 
            {
              SymbolInstrs RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolInstr v1 = (SymbolInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolInstrs v2 = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstrs(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCTIONS ::= 
            {
              SymbolInstrs RESULT =null;
		 RESULT = new SymbolInstrs(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCTION ::= DECLARATION ENDLINE 
            {
              SymbolInstr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolDec v = (SymbolDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCTION ::= ASSIGNATION ENDLINE 
            {
              SymbolInstr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolAssign v = (SymbolAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCTION ::= SWAP ENDLINE 
            {
              SymbolInstr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolSwap v = (SymbolSwap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCTION ::= FUNCTION_CALL ENDLINE 
            {
              SymbolInstr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFuncCall v = (SymbolFuncCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCTION ::= RETURN ENDLINE 
            {
              SymbolInstr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolReturn v = (SymbolReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCTION ::= IF 
            {
              SymbolInstr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolIf v = (SymbolIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCTION ::= LOOP 
            {
              SymbolInstr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolLoop v = (SymbolLoop)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCTION ::= FOR 
            {
              SymbolInstr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolFor v = (SymbolFor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCTION ::= IN ENDLINE 
            {
              SymbolInstr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolIn v = (SymbolIn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCTION ::= OUT ENDLINE 
            {
              SymbolInstr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOut v = (SymbolOut)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASSIGNATION ::= VARIABLE EQUAL OPERATION 
            {
              SymbolAssign RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolVar v1 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperation v2 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAssign(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SWAP ::= VARIABLE OP_SWAP VARIABLE 
            {
              SymbolSwap RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolVar v1 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolVar v2 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolSwap(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWAP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERATION ::= OPERAND OP OPERAND 
            {
              SymbolOperation RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperand v1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOp v2 = (SymbolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperand v3 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperation(v1, v2, v3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERATION ::= OPERAND 
            {
              SymbolOperation RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperand v1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperation(v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERAND ::= VALUE 
            {
              SymbolOperand RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERAND ::= L_PAREN OPERATION R_PAREN 
            {
              SymbolOperand RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOperation v = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolOperand(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERAND ::= NOT OPERAND 
            {
              SymbolOperand RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperand v = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(v, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OP ::= ADD 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.ADD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OP ::= SUB 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.SUB); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OP ::= PROD 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.PROD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OP ::= DIV 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.DIV); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OP ::= MOD 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.MOD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OP ::= OR 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.OR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OP ::= AND 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.AND); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OP ::= OP_REL 
            {
              SymbolOp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOp v = (SymbolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OP_REL ::= IS_EQUAL 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.IS_EQUAL, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OP_REL ::= BIGGER 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.BIGGER, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OP_REL ::= BEQ 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.BEQ, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP_REL ::= LESSER 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.LESSER, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OP_REL ::= LEQ 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.LEQ, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OP_REL ::= NEQ 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.NEQ, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALUE ::= VARIABLE 
            {
              SymbolValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolVar v = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolValue(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VALUE ::= FIXED_VALUE 
            {
              SymbolValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolValue(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALUE ::= FUNCTION_CALL 
            {
              SymbolValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolFuncCall v = (SymbolFuncCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolValue(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VARIABLE ::= IDENTIFIER ARRAY_SUFFIX 
            {
              SymbolVar RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArrSuff v2 = (SymbolArrSuff)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolVar(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARRAY_SUFFIX ::= L_BRACKET VARIABLE R_BRACKET ARRAY_SUFFIX 
            {
              SymbolArrSuff RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolVar v1 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArrSuff v2 = (SymbolArrSuff)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArrSuff(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_SUFFIX",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARRAY_SUFFIX ::= 
            {
              SymbolArrSuff RESULT =null;
		 RESULT = new SymbolArrSuff(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_SUFFIX",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FIXED_VALUE ::= INTEGER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; /* Returns Integer */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIXED_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FIXED_VALUE ::= CHARACTER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character v = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; /* Returns Character */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIXED_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FIXED_VALUE ::= LIST 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolList v = (SymbolList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; /* Returns SymbolList */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIXED_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FIXED_VALUE ::= BOOLEAN 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean v = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; /* Returns Integer */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIXED_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TYPE ::= TYPE_INTEGER 
            {
              SymbolType RESULT =null;
		 RESULT = new SymbolType(ParserSym.TYPE_INTEGER); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TYPE ::= TYPE_CHARACTER 
            {
              SymbolType RESULT =null;
		 RESULT = new SymbolType(ParserSym.TYPE_CHARACTER); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TYPE ::= TYPE_BOOLEAN 
            {
              SymbolType RESULT =null;
		 RESULT = new SymbolType(ParserSym.TYPE_BOOLEAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TYPE ::= TYPE_VOID 
            {
              SymbolType RESULT =null;
		 RESULT = new SymbolType(ParserSym.TYPE_VOID); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TYPE ::= TYPE L_BRACKET R_BRACKET 
            {
              SymbolType RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolType v = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymbolType(ParserSym.TYPE_ARRAY, v) 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LIST ::= L_BRACKET OPERATION CONT_LIST 
            {
              SymbolList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOperation v1 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolList v2 = (SymbolList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolList(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIST",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONT_LIST ::= COMMA VALUE CONT_LIST 
            {
              SymbolList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolValue v1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolList v2 = (SymbolList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolList(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_LIST",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONT_LIST ::= R_BRACKET 
            {
              SymbolList RESULT =null;
		 RESULT = new SymbolList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_LIST",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IF ::= RES_IF L_PAREN OPERATION R_PAREN L_KEY INSTRUCTIONS R_KEY ELSE 
            {
              SymbolIf RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolOperation v1 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolInstrs v2 = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolElse v3 = (SymbolElse)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolIf(v1, v2, v3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ELSE ::= RES_ELSE IF 
            {
              SymbolElse RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolIf v = (SymbolIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolElse(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ELSE ::= RES_ELSE L_KEY INSTRUCTIONS R_KEY 
            {
              SymbolElse RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolInstrs v = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolElse(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ELSE ::= 
            {
              SymbolElse RESULT =null;
		 RESULT = new SymbolElse(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LOOP ::= RES_WHILE L_PAREN OPERATION R_PAREN L_KEY INSTRUCTIONS R_KEY 
            {
              SymbolLoop RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolOperation v1 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolInstrs v2 = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolLoop(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FOR ::= RES_FOR L_PAREN HEADER_SEGMENT ENDLINE OPERATION ENDLINE HEADER_SEGMENT R_PAREN L_KEY INSTRUCTIONS R_KEY 
            {
              SymbolFor RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolOperation v2 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolInstrs v4 = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolFor(v1, v2, v3, v4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // HEADER_SEGMENT ::= DECLARATION 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDec v = (SymbolDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HEADER_SEGMENT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // HEADER_SEGMENT ::= ASSIGNATION 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolAssign v = (SymbolAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HEADER_SEGMENT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // HEADER_SEGMENT ::= SWAP 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolSwap v = (SymbolSwap)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HEADER_SEGMENT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // HEADER_SEGMENT ::= FUNCTION_CALL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolFuncCall v = (SymbolFuncCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HEADER_SEGMENT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUNCTION_CALL ::= VARIABLE L_PAREN PARAMS R_PAREN 
            {
              SymbolFuncCall RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolVar v1 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolParams v2 = (SymbolParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolFuncCall(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PARAMS ::= VALUE MORE_PARAMS 
            {
              SymbolParams RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolValue v1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolParams v2 = (SymbolParams)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolParams(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PARAMS ::= 
            {
              SymbolParams RESULT =null;
		 RESULT = new SymbolParams(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MORE_PARAMS ::= COMMA VALUE MORE_PARAMS 
            {
              SymbolParams RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolValue v1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolParams v2 = (SymbolParams)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolParams(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MORE_PARAMS",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MORE_PARAMS ::= 
            {
              SymbolParams RESULT =null;
		 RESULT = new SymbolParams(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MORE_PARAMS",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // RETURN ::= RES_RETURN OPERATION 
            {
              SymbolReturn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperation v = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolReturn(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // RETURN ::= RES_RETURN 
            {
              SymbolReturn RESULT =null;
		 RESULT = new SymbolReturn(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IN ::= RES_IN L_PAREN VARIABLE R_PAREN 
            {
              SymbolIn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolVar v = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolIn(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OUT ::= RES_OUT L_PAREN VALUE R_PAREN 
            {
              SymbolOut RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolOut(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
