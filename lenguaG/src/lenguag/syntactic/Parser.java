
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package lenguag.syntactic;

import lenguag.syntactic.symbols.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\002\004\000\002\006" +
    "\006\000\002\003\005\000\002\003\004\000\002\003\002" +
    "\000\002\003\004\000\002\004\004\000\002\004\003\000" +
    "\002\005\006\000\002\005\004\000\002\014\012\000\002" +
    "\007\004\000\002\007\002\000\002\010\005\000\002\010" +
    "\002\000\002\011\004\000\002\012\004\000\002\012\002" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\004\000\002\013" +
    "\004\000\002\017\005\000\002\020\005\000\002\024\005" +
    "\000\002\024\003\000\002\025\003\000\002\025\005\000" +
    "\002\025\004\000\002\025\004\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\016" +
    "\004\000\002\032\006\000\002\032\002\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\005\000\002\033\005\000\002\033" +
    "\003\000\002\034\005\000\002\034\003\000\002\035\012" +
    "\000\002\036\004\000\002\036\006\000\002\036\002\000" +
    "\002\037\011\000\002\040\015\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\041" +
    "\006\000\002\042\004\000\002\042\002\000\002\043\005" +
    "\000\002\043\002\000\002\021\004\000\002\021\003\000" +
    "\002\022\006\000\002\023\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\020\003\011\004\ufffc\005\005\007\012\010" +
    "\013\011\017\013\016\001\002\000\006\024\ufff9\033\ufff9" +
    "\001\002\000\012\007\012\010\013\011\017\013\016\001" +
    "\002\000\004\004\245\001\002\000\004\002\243\001\002" +
    "\000\006\027\024\052\025\001\002\000\004\033\023\001" +
    "\002\000\006\027\uffc4\052\uffc4\001\002\000\006\027\uffc3" +
    "\052\uffc3\001\002\000\004\033\021\001\002\000\020\003" +
    "\011\004\ufffc\005\005\007\012\010\013\011\017\013\016" +
    "\001\002\000\006\027\uffc1\052\uffc1\001\002\000\006\027" +
    "\uffc2\052\uffc2\001\002\000\004\004\ufffd\001\002\000\020" +
    "\003\011\004\ufffc\005\005\007\012\010\013\011\017\013" +
    "\016\001\002\000\004\004\ufffe\001\002\000\004\004\ufffb" +
    "\001\002\000\004\030\242\001\002\000\054\023\uffc9\024" +
    "\uffc9\027\236\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043" +
    "\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9" +
    "\001\002\000\010\023\027\031\030\033\ufff7\001\002\000" +
    "\014\007\012\010\013\011\017\013\016\024\ufff4\001\002" +
    "\000\024\006\043\023\042\027\033\036\041\052\025\053" +
    "\032\054\031\055\034\056\036\001\002\000\044\024\uffc7" +
    "\030\uffc7\032\uffc7\033\uffc7\035\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\001\002\000\044\024\uffc8\030" +
    "\uffc8\032\uffc8\033\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047" +
    "\uffc8\050\uffc8\051\uffc8\001\002\000\024\006\043\023\042" +
    "\027\033\036\041\052\025\053\032\054\031\055\034\056" +
    "\036\001\002\000\044\024\uffc5\030\uffc5\032\uffc5\033\uffc5" +
    "\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5" +
    "\001\002\000\046\023\074\024\uffce\030\uffce\032\uffce\033" +
    "\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce" +
    "\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051" +
    "\uffce\001\002\000\044\024\uffbe\030\uffbe\032\uffbe\033\uffbe" +
    "\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe" +
    "\001\002\000\044\024\uffc6\030\uffc6\032\uffc6\033\uffc6\035" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\001" +
    "\002\000\044\024\uffe0\030\uffe0\032\uffe0\033\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\001\002" +
    "\000\024\006\043\023\042\027\033\036\041\052\025\053" +
    "\032\054\031\055\034\056\036\001\002\000\024\006\043" +
    "\023\042\027\033\036\041\052\025\053\032\054\031\055" +
    "\034\056\036\001\002\000\024\006\043\023\042\027\033" +
    "\036\041\052\025\053\032\054\031\055\034\056\036\001" +
    "\002\000\006\024\ufff8\033\ufff8\001\002\000\044\024\uffe1" +
    "\030\uffe1\032\uffe1\033\uffe1\035\060\036\062\037\061\040" +
    "\063\041\055\042\065\043\050\044\056\045\052\046\064" +
    "\047\054\050\066\051\057\001\002\000\044\024\uffcc\030" +
    "\uffcc\032\uffcc\033\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\001\002\000\044\024\uffcd\030\uffcd" +
    "\032\uffcd\033\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd" +
    "\050\uffcd\051\uffcd\001\002\000\024\006\uffd6\023\uffd6\027" +
    "\uffd6\036\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6" +
    "\001\002\000\024\006\043\023\042\027\033\036\041\052" +
    "\025\053\032\054\031\055\034\056\036\001\002\000\024" +
    "\006\uffd3\023\uffd3\027\uffd3\036\uffd3\052\uffd3\053\uffd3\054" +
    "\uffd3\055\uffd3\056\uffd3\001\002\000\024\006\uffd5\023\uffd5" +
    "\027\uffd5\036\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056" +
    "\uffd5\001\002\000\024\006\uffd1\023\uffd1\027\uffd1\036\uffd1" +
    "\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\001\002\000" +
    "\024\006\uffd8\023\uffd8\027\uffd8\036\uffd8\052\uffd8\053\uffd8" +
    "\054\uffd8\055\uffd8\056\uffd8\001\002\000\024\006\uffd4\023" +
    "\uffd4\027\uffd4\036\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4" +
    "\056\uffd4\001\002\000\024\006\uffcf\023\uffcf\027\uffcf\036" +
    "\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\001\002" +
    "\000\024\006\uffdc\023\uffdc\027\uffdc\036\uffdc\052\uffdc\053" +
    "\uffdc\054\uffdc\055\uffdc\056\uffdc\001\002\000\024\006\uffda" +
    "\023\uffda\027\uffda\036\uffda\052\uffda\053\uffda\054\uffda\055" +
    "\uffda\056\uffda\001\002\000\024\006\uffdb\023\uffdb\027\uffdb" +
    "\036\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\001" +
    "\002\000\024\006\uffd9\023\uffd9\027\uffd9\036\uffd9\052\uffd9" +
    "\053\uffd9\054\uffd9\055\uffd9\056\uffd9\001\002\000\024\006" +
    "\uffd2\023\uffd2\027\uffd2\036\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\056\uffd2\001\002\000\024\006\uffd7\023\uffd7\027" +
    "\uffd7\036\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7" +
    "\001\002\000\024\006\uffd0\023\uffd0\027\uffd0\036\uffd0\052" +
    "\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\001\002\000\012" +
    "\024\uffe2\030\uffe2\032\uffe2\033\uffe2\001\002\000\044\024" +
    "\uffde\030\uffde\032\uffde\033\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046" +
    "\uffde\047\uffde\050\uffde\051\uffde\001\002\000\004\024\072" +
    "\001\002\000\044\024\uffdf\030\uffdf\032\uffdf\033\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\001" +
    "\002\000\044\024\uffdd\030\uffdd\032\uffdd\033\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044" +
    "\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\001\002" +
    "\000\026\006\043\023\042\024\uffaf\027\033\036\041\052" +
    "\025\053\032\054\031\055\034\056\036\001\002\000\004" +
    "\024\103\001\002\000\006\024\uffad\032\077\001\002\000" +
    "\024\006\043\023\042\027\033\036\041\052\025\053\032" +
    "\054\031\055\034\056\036\001\002\000\004\024\uffb0\001" +
    "\002\000\006\024\uffad\032\077\001\002\000\004\024\uffae" +
    "\001\002\000\044\024\uffb1\030\uffb1\032\uffb1\033\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1" +
    "\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\001" +
    "\002\000\006\030\105\032\106\001\002\000\044\024\uffbc" +
    "\030\uffbc\032\uffbc\033\uffbc\035\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\001\002\000\024\006\043\023" +
    "\042\027\033\036\041\052\025\053\032\054\031\055\034" +
    "\056\036\001\002\000\044\024\uffbf\030\uffbf\032\uffbf\033" +
    "\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf" +
    "\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051" +
    "\uffbf\001\002\000\006\030\105\032\106\001\002\000\044" +
    "\024\uffbd\030\uffbd\032\uffbd\033\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd" +
    "\046\uffbd\047\uffbd\050\uffbd\051\uffbd\001\002\000\006\024" +
    "\ufff2\032\231\001\002\000\004\024\116\001\002\000\006" +
    "\027\024\052\025\001\002\000\006\024\ufff1\032\ufff1\001" +
    "\002\000\004\025\117\001\002\000\034\005\005\007\012" +
    "\010\013\011\017\013\016\014\135\016\124\017\134\020" +
    "\140\021\132\022\133\026\uffef\052\025\001\002\000\004" +
    "\033\230\001\002\000\034\005\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\013\uffe8\014\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\026\uffe8\052\uffe8\001\002\000\004\033\227\001" +
    "\002\000\004\033\226\001\002\000\004\023\220\001\002" +
    "\000\010\023\074\031\215\034\214\001\002\000\034\005" +
    "\uffe9\007\uffe9\010\uffe9\011\uffe9\013\uffe9\014\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\026\uffe9\052\uffe9\001" +
    "\002\000\004\026\213\001\002\000\006\027\024\052\025" +
    "\001\002\000\034\005\005\007\012\010\013\011\017\013" +
    "\016\014\135\016\124\017\134\020\140\021\132\022\133" +
    "\026\uffef\052\025\001\002\000\004\023\206\001\002\000" +
    "\004\023\203\001\002\000\004\023\165\001\002\000\004" +
    "\023\151\001\002\000\004\033\150\001\002\000\004\033" +
    "\147\001\002\000\026\006\043\023\042\027\033\033\uffab" +
    "\036\041\052\025\053\032\054\031\055\034\056\036\001" +
    "\002\000\004\033\145\001\002\000\034\005\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\013\uffe7\014\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\026\uffe7\052\uffe7\001\002\000\004" +
    "\033\144\001\002\000\034\005\uffec\007\uffec\010\uffec\011" +
    "\uffec\013\uffec\014\uffec\016\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\026\uffec\052\uffec\001\002\000\034\005\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\013\uffe5\014\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\026\uffe5\052\uffe5\001\002\000" +
    "\004\033\uffac\001\002\000\034\005\uffed\007\uffed\010\uffed" +
    "\011\uffed\013\uffed\014\uffed\016\uffed\017\uffed\020\uffed\021" +
    "\uffed\022\uffed\026\uffed\052\uffed\001\002\000\034\005\uffee" +
    "\007\uffee\010\uffee\011\uffee\013\uffee\014\uffee\016\uffee\017" +
    "\uffee\020\uffee\021\uffee\022\uffee\026\uffee\052\uffee\001\002" +
    "\000\024\006\043\023\042\027\033\036\041\052\025\053" +
    "\032\054\031\055\034\056\036\001\002\000\004\024\153" +
    "\001\002\000\004\025\154\001\002\000\034\005\005\007" +
    "\012\010\013\011\017\013\016\014\135\016\124\017\134" +
    "\020\140\021\132\022\133\026\uffef\052\025\001\002\000" +
    "\004\026\156\001\002\000\036\005\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\013\uffb8\014\uffb8\015\160\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\026\uffb8\052\uffb8\001\002\000\034" +
    "\005\uffbb\007\uffbb\010\uffbb\011\uffbb\013\uffbb\014\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\026\uffbb\052\uffbb" +
    "\001\002\000\006\014\135\025\161\001\002\000\034\005" +
    "\005\007\012\010\013\011\017\013\016\014\135\016\124" +
    "\017\134\020\140\021\132\022\133\026\uffef\052\025\001" +
    "\002\000\034\005\uffba\007\uffba\010\uffba\011\uffba\013\uffba" +
    "\014\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\026" +
    "\uffba\052\uffba\001\002\000\004\026\164\001\002\000\034" +
    "\005\uffb9\007\uffb9\010\uffb9\011\uffb9\013\uffb9\014\uffb9\016" +
    "\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\026\uffb9\052\uffb9" +
    "\001\002\000\016\005\005\007\012\010\013\011\017\013" +
    "\016\052\025\001\002\000\004\033\173\001\002\000\006" +
    "\024\uffb3\033\uffb3\001\002\000\006\024\uffb4\033\uffb4\001" +
    "\002\000\006\024\uffb5\033\uffb5\001\002\000\006\024\uffb2" +
    "\033\uffb2\001\002\000\024\006\043\023\042\027\033\036" +
    "\041\052\025\053\032\054\031\055\034\056\036\001\002" +
    "\000\004\033\175\001\002\000\016\005\005\007\012\010" +
    "\013\011\017\013\016\052\025\001\002\000\004\024\177" +
    "\001\002\000\004\025\200\001\002\000\034\005\005\007" +
    "\012\010\013\011\017\013\016\014\135\016\124\017\134" +
    "\020\140\021\132\022\133\026\uffef\052\025\001\002\000" +
    "\004\026\202\001\002\000\034\005\uffb6\007\uffb6\010\uffb6" +
    "\011\uffb6\013\uffb6\014\uffb6\016\uffb6\017\uffb6\020\uffb6\021" +
    "\uffb6\022\uffb6\026\uffb6\052\uffb6\001\002\000\024\006\043" +
    "\023\042\027\033\036\041\052\025\053\032\054\031\055" +
    "\034\056\036\001\002\000\004\024\205\001\002\000\004" +
    "\033\uffa9\001\002\000\004\052\025\001\002\000\004\024" +
    "\210\001\002\000\004\033\uffaa\001\002\000\004\026\ufff0" +
    "\001\002\000\010\024\ufff7\031\030\033\ufff7\001\002\000" +
    "\020\003\ufff6\004\ufff6\005\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\013\ufff6\001\002\000\004\052\025\001\002\000\024\006" +
    "\043\023\042\027\033\036\041\052\025\053\032\054\031" +
    "\055\034\056\036\001\002\000\006\024\uffe4\033\uffe4\001" +
    "\002\000\006\024\uffe3\033\uffe3\001\002\000\024\006\043" +
    "\023\042\027\033\036\041\052\025\053\032\054\031\055" +
    "\034\056\036\001\002\000\004\024\222\001\002\000\004" +
    "\025\223\001\002\000\034\005\005\007\012\010\013\011" +
    "\017\013\016\014\135\016\124\017\134\020\140\021\132" +
    "\022\133\026\uffef\052\025\001\002\000\004\026\225\001" +
    "\002\000\034\005\uffb7\007\uffb7\010\uffb7\011\uffb7\013\uffb7" +
    "\014\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\026" +
    "\uffb7\052\uffb7\001\002\000\034\005\uffea\007\uffea\010\uffea" +
    "\011\uffea\013\uffea\014\uffea\016\uffea\017\uffea\020\uffea\021" +
    "\uffea\022\uffea\026\uffea\052\uffea\001\002\000\034\005\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\013\uffeb\014\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\026\uffeb\052\uffeb\001\002" +
    "\000\034\005\uffe6\007\uffe6\010\uffe6\011\uffe6\013\uffe6\014" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\026\uffe6" +
    "\052\uffe6\001\002\000\012\007\012\010\013\011\017\013" +
    "\016\001\002\000\004\024\ufff5\001\002\000\006\024\ufff2" +
    "\032\231\001\002\000\004\024\ufff3\001\002\000\052\023" +
    "\uffcb\024\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043" +
    "\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb" +
    "\001\002\000\024\006\043\023\042\027\033\036\041\052" +
    "\025\053\032\054\031\055\034\056\036\001\002\000\004" +
    "\030\240\001\002\000\054\023\uffc9\024\uffc9\027\236\030" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\001\002\000\052" +
    "\023\uffca\024\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca" +
    "\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051" +
    "\uffca\001\002\000\006\027\uffc0\052\uffc0\001\002\000\004" +
    "\002\001\001\002\000\004\002\000\001\002\000\004\025" +
    "\246\001\002\000\034\005\005\007\012\010\013\011\017" +
    "\013\016\014\135\016\124\017\134\020\140\021\132\022" +
    "\133\026\uffef\052\025\001\002\000\004\026\250\001\002" +
    "\000\004\002\uffff\001\002\000\006\024\ufffa\033\ufffa\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\016\002\006\003\005\004\013\005\003\014" +
    "\014\015\007\001\001\000\002\001\001\000\006\005\250" +
    "\015\127\001\001\000\004\006\243\001\001\000\002\001" +
    "\001\000\004\016\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\017\004\013\005\003\014\014\015\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\021\004\013\005\003\014\014\015\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\234\001\001\000\002\001\001\000\010\007\112\011\111" +
    "\015\113\001\001\000\020\016\034\024\043\025\044\026" +
    "\037\031\046\033\036\041\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\016\034\024\103\025\044\026" +
    "\037\031\046\033\036\041\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\016\034\025\072\026\037\031\046" +
    "\033\036\041\045\001\001\000\020\016\034\024\070\025" +
    "\044\026\037\031\046\033\036\041\045\001\001\000\016" +
    "\016\034\025\067\026\037\031\046\033\036\041\045\001" +
    "\001\000\002\001\001\000\006\027\050\030\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\016\034\025\066\026\037\031\046\033\036\041\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\034" +
    "\024\075\025\044\026\037\031\046\033\036\041\045\042" +
    "\074\001\001\000\002\001\001\000\004\043\077\001\001" +
    "\000\020\016\034\024\100\025\044\026\037\031\046\033" +
    "\036\041\045\001\001\000\002\001\001\000\004\043\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\106\001\001\000\002\001\001\000\020\016\034\024\107" +
    "\025\044\026\037\031\046\033\036\041\045\001\001\000" +
    "\002\001\001\000\004\034\110\001\001\000\002\001\001" +
    "\000\004\010\231\001\001\000\002\001\001\000\004\016" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\004\135\005\003\012\126\013\130\015\127\016\124\017" +
    "\136\020\142\021\122\022\117\023\140\035\125\037\120" +
    "\040\141\041\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\211\001\001\000\040\004\135\005\003\012\210" +
    "\013\130\015\127\016\124\017\136\020\142\021\122\022" +
    "\117\023\140\035\125\037\120\040\141\041\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\016\034\024\145\025\044\026\037\031\046\033\036\041" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\034" +
    "\024\151\025\044\026\037\031\046\033\036\041\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\135" +
    "\005\003\012\154\013\130\015\127\016\124\017\136\020" +
    "\142\021\122\022\117\023\140\035\125\037\120\040\141" +
    "\041\121\001\001\000\002\001\001\000\004\036\156\001" +
    "\001\000\002\001\001\000\004\035\161\001\001\000\040" +
    "\004\135\005\003\012\162\013\130\015\127\016\124\017" +
    "\136\020\142\021\122\022\117\023\140\035\125\037\120" +
    "\040\141\041\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\170\005\003\015\127" +
    "\016\124\017\167\020\166\041\171\044\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\016\034\024\173\025" +
    "\044\026\037\031\046\033\036\041\045\001\001\000\002" +
    "\001\001\000\022\004\170\005\003\015\127\016\124\017" +
    "\167\020\166\041\171\044\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\135\005\003\012\200\013" +
    "\130\015\127\016\124\017\136\020\142\021\122\022\117" +
    "\023\140\035\125\037\120\040\141\041\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\016\034\024\203" +
    "\025\044\026\037\031\046\033\036\041\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\216\001\001" +
    "\000\020\016\034\024\215\025\044\026\037\031\046\033" +
    "\036\041\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\016\034\024\220\025\044\026\037\031\046\033" +
    "\036\041\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\004\135\005\003\012\223\013\130\015\127\016" +
    "\124\017\136\020\142\021\122\022\117\023\140\035\125" +
    "\037\120\040\141\041\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\232\015\113\001\001\000\002\001" +
    "\001\000\004\010\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\016\034\024\236\025\044\026\037\031" +
    "\046\033\036\041\045\001\001\000\002\001\001\000\004" +
    "\032\240\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\004\135\005\003\012\246\013\130\015\127\016\124\017" +
    "\136\020\142\021\122\022\117\023\140\035\125\037\120" +
    "\040\141\041\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /**
     * error treatment methods override 
     **/

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        report_error("Catastrophical syntactical error", cur_token);
        done_parsing();        
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        report_error("Syntactical error", cur_token);
    }

    @Override
    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder("ERROR");
        if (info instanceof Symbol) {
            ComplexSymbol token = (ComplexSymbol)info;
            Location l = token.getLeft();
            
            if (l != null) {
                msg.append(" (fila: ")
                   .append(l.getLine())
                   .append(", columna: ")
                   .append(l.getColumn())
                   .append(")");
            }
        }
        msg.append(": ").append(message);
        
        System.err.println("\u001B[31m" + msg + "\u001B[0m");
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Catastrophical error ("+message+")", info);
        done_parsing();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= BODY EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBody start_val = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // BODY ::= DECLARATIONS MAIN 
            {
              SymbolBody RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolDecs v1 = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolMain v2 = (SymbolMain)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBody(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAIN ::= RES_MAIN L_KEY INSTRUCTIONS R_KEY 
            {
              SymbolMain RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolInstrs v = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolMain(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARATIONS ::= DECLARATION ENDLINE DECLARATIONS 
            {
              SymbolDecs RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolDec v1 = (SymbolDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDecs v2 = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecs(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARATIONS ::= FUNCTION DECLARATIONS 
            {
              SymbolDecs RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolFunc v1 = (SymbolFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDecs v2 = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecs(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARATIONS ::= 
            {
              SymbolDecs RESULT =null;
		 RESULT = new SymbolDecs(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARATIONS ::= error ENDLINE 
            {
              SymbolDecs RESULT =null;
		 System.out.println("OWO"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARATION ::= CONSTANT CONT_DECLARATION 
            {
              SymbolDec RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDecCont v = (SymbolDecCont)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDec(v, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARATION ::= CONT_DECLARATION 
            {
              SymbolDec RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDecCont v = (SymbolDecCont)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDec(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONT_DECLARATION ::= TYPE VARIABLE EQUAL OPERATION 
            {
              SymbolDecCont RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolType v1 = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolVar v2 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location v3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperation v3 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecCont(v1, v2, v3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_DECLARATION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONT_DECLARATION ::= TYPE VARIABLE 
            {
              SymbolDecCont RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolType v1 = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolVar v2 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecCont(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_DECLARATION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCTION ::= TYPE VARIABLE L_PAREN ARGS R_PAREN L_KEY INSTRUCTIONS R_KEY 
            {
              SymbolFunc RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		SymbolType v1 = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		SymbolVar v2 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location v3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location v3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolArgs v3 = (SymbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location v4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolInstrs v4 = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolFunc(v1, v2, v3, v4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ARGS ::= ARG MORE_ARGS 
            {
              SymbolArgs RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolArg v1 = (SymbolArg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolArgs v2 = (SymbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArgs(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ARGS ::= 
            {
              SymbolArgs RESULT =null;
		 RESULT = new SymbolArgs(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MORE_ARGS ::= COMMA ARG MORE_ARGS 
            {
              SymbolArgs RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolArg v1 = (SymbolArg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolArgs v2 = (SymbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArgs(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MORE_ARGS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MORE_ARGS ::= 
            {
              SymbolArgs RESULT =null;
		 RESULT = new SymbolArgs(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MORE_ARGS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARG ::= TYPE VARIABLE 
            {
              SymbolArg RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolType v1 = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolVar v2 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArg(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCTIONS ::= INSTRUCTION INSTRUCTIONS 
            {
              SymbolInstrs RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolInstr v1 = (SymbolInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolInstrs v2 = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstrs(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCTIONS ::= 
            {
              SymbolInstrs RESULT =null;
		 RESULT = new SymbolInstrs(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCTION ::= DECLARATION ENDLINE 
            {
              SymbolInstr RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolDec v = (SymbolDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCTION ::= ASSIGNATION ENDLINE 
            {
              SymbolInstr RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolAssign v = (SymbolAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCTION ::= SWAP ENDLINE 
            {
              SymbolInstr RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolSwap v = (SymbolSwap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCTION ::= FUNCTION_CALL ENDLINE 
            {
              SymbolInstr RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolFuncCall v = (SymbolFuncCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCTION ::= RETURN ENDLINE 
            {
              SymbolInstr RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolReturn v = (SymbolReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCTION ::= IF 
            {
              SymbolInstr RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolIf v = (SymbolIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCTION ::= LOOP 
            {
              SymbolInstr RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolLoop v = (SymbolLoop)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCTION ::= FOR 
            {
              SymbolInstr RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolFor v = (SymbolFor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCTION ::= IN ENDLINE 
            {
              SymbolInstr RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolIn v = (SymbolIn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCTION ::= OUT ENDLINE 
            {
              SymbolInstr RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOut v = (SymbolOut)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASSIGNATION ::= VARIABLE EQUAL OPERATION 
            {
              SymbolAssign RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolVar v1 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperation v2 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAssign(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SWAP ::= VARIABLE OP_SWAP VARIABLE 
            {
              SymbolSwap RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolVar v1 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolVar v2 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolSwap(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWAP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERATION ::= OPERAND OP OPERAND 
            {
              SymbolOperation RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperand v1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOp v2 = (SymbolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand v3 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperation(v1, v2, v3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERATION ::= OPERAND 
            {
              SymbolOperation RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand v1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperation(v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERAND ::= VALUE 
            {
              SymbolOperand RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERAND ::= L_PAREN OPERATION R_PAREN 
            {
              SymbolOperand RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperation v = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolOperand(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERAND ::= NOT OPERAND 
            {
              SymbolOperand RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand v = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 v.negate(); RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERAND ::= SUB OPERAND 
            {
              SymbolOperand RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand v = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 v.negate(); RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OP ::= ADD 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.ADD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OP ::= SUB 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.SUB); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OP ::= PROD 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.PROD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OP ::= DIV 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.DIV); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OP ::= MOD 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.MOD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OP ::= OR 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.OR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OP ::= AND 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.AND); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OP ::= OP_REL 
            {
              SymbolOp RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOp v = (SymbolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OP_REL ::= IS_EQUAL 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.IS_EQUAL, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP_REL ::= BIGGER 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.BIGGER, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OP_REL ::= BEQ 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.BEQ, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OP_REL ::= LESSER 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.LESSER, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OP_REL ::= LEQ 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.LEQ, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OP_REL ::= NEQ 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.NEQ, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALUE ::= VARIABLE 
            {
              SymbolValue RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolVar v = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolValue(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALUE ::= FIXED_VALUE 
            {
              SymbolValue RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolValue(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VALUE ::= FUNCTION_CALL 
            {
              SymbolValue RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolFuncCall v = (SymbolFuncCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolValue(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VARIABLE ::= IDENTIFIER ARRAY_SUFFIX 
            {
              SymbolVar RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolArrSuff v2 = (SymbolArrSuff)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolVar(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARRAY_SUFFIX ::= L_BRACKET OPERATION R_BRACKET ARRAY_SUFFIX 
            {
              SymbolArrSuff RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperation v1 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolArrSuff v2 = (SymbolArrSuff)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArrSuff(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_SUFFIX",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARRAY_SUFFIX ::= 
            {
              SymbolArrSuff RESULT =null;
		 RESULT = new SymbolArrSuff(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_SUFFIX",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FIXED_VALUE ::= INTEGER 
            {
              Object RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; /* Returns Integer */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIXED_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FIXED_VALUE ::= CHARACTER 
            {
              Object RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Character v = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; /* Returns Character */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIXED_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FIXED_VALUE ::= LIST 
            {
              Object RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolList v = (SymbolList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; /* Returns SymbolList */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIXED_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FIXED_VALUE ::= BOOLEAN 
            {
              Object RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean v = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; /* Returns Integer */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIXED_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TYPE ::= TYPE_INTEGER 
            {
              SymbolType RESULT =null;
		 RESULT = new SymbolType(ParserSym.TYPE_INTEGER); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TYPE ::= TYPE_CHARACTER 
            {
              SymbolType RESULT =null;
		 RESULT = new SymbolType(ParserSym.TYPE_CHARACTER); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TYPE ::= TYPE_BOOLEAN 
            {
              SymbolType RESULT =null;
		 RESULT = new SymbolType(ParserSym.TYPE_BOOLEAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TYPE ::= TYPE_VOID 
            {
              SymbolType RESULT =null;
		 RESULT = new SymbolType(ParserSym.TYPE_VOID); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TYPE ::= TYPE L_BRACKET R_BRACKET 
            {
              SymbolType RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolType v = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymbolType(ParserSym.TYPE_ARRAY, v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LIST ::= L_BRACKET OPERATION CONT_LIST 
            {
              SymbolList RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperation v1 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolList v2 = (SymbolList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolList(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIST",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LIST ::= STRING 
            {
              SymbolList RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolList(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIST",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONT_LIST ::= COMMA OPERATION CONT_LIST 
            {
              SymbolList RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperation v1 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolList v2 = (SymbolList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolList(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_LIST",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CONT_LIST ::= R_BRACKET 
            {
              SymbolList RESULT =null;
		 RESULT = new SymbolList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_LIST",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IF ::= RES_IF L_PAREN OPERATION R_PAREN L_KEY INSTRUCTIONS R_KEY ELSE 
            {
              SymbolIf RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		SymbolOperation v1 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolInstrs v2 = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location v3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolElse v3 = (SymbolElse)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolIf(v1, v2, v3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ELSE ::= RES_ELSE IF 
            {
              SymbolElse RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolIf v = (SymbolIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolElse(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ELSE ::= RES_ELSE L_KEY INSTRUCTIONS R_KEY 
            {
              SymbolElse RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolInstrs v = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolElse(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ELSE ::= 
            {
              SymbolElse RESULT =null;
		 RESULT = new SymbolElse(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LOOP ::= RES_WHILE L_PAREN OPERATION R_PAREN L_KEY INSTRUCTIONS R_KEY 
            {
              SymbolLoop RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolOperation v1 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolInstrs v2 = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolLoop(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FOR ::= RES_FOR L_PAREN HEADER_SEGMENT ENDLINE OPERATION ENDLINE HEADER_SEGMENT R_PAREN L_KEY INSTRUCTIONS R_KEY 
            {
              SymbolFor RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xright;
		SymbolBase v1 = (SymbolBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		SymbolOperation v2 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location v3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location v3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolBase v3 = (SymbolBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location v4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolInstrs v4 = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolFor(v1, v2, v3, v4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // HEADER_SEGMENT ::= DECLARATION 
            {
              SymbolBase RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDec v = (SymbolDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HEADER_SEGMENT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // HEADER_SEGMENT ::= ASSIGNATION 
            {
              SymbolBase RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolAssign v = (SymbolAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HEADER_SEGMENT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // HEADER_SEGMENT ::= SWAP 
            {
              SymbolBase RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolSwap v = (SymbolSwap)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HEADER_SEGMENT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // HEADER_SEGMENT ::= FUNCTION_CALL 
            {
              SymbolBase RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolFuncCall v = (SymbolFuncCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HEADER_SEGMENT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FUNCTION_CALL ::= VARIABLE L_PAREN PARAMS R_PAREN 
            {
              SymbolFuncCall RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolVar v1 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolParams v2 = (SymbolParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolFuncCall(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PARAMS ::= OPERATION MORE_PARAMS 
            {
              SymbolParams RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperation v1 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolParams v2 = (SymbolParams)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolParams(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PARAMS ::= 
            {
              SymbolParams RESULT =null;
		 RESULT = new SymbolParams(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MORE_PARAMS ::= COMMA OPERATION MORE_PARAMS 
            {
              SymbolParams RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperation v1 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolParams v2 = (SymbolParams)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolParams(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MORE_PARAMS",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // MORE_PARAMS ::= 
            {
              SymbolParams RESULT =null;
		 RESULT = new SymbolParams(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MORE_PARAMS",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // RETURN ::= RES_RETURN OPERATION 
            {
              SymbolReturn RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperation v = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolReturn(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // RETURN ::= RES_RETURN 
            {
              SymbolReturn RESULT =null;
		 RESULT = new SymbolReturn(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // IN ::= RES_IN L_PAREN VARIABLE R_PAREN 
            {
              SymbolIn RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolVar v = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolIn(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OUT ::= RES_OUT L_PAREN OPERATION R_PAREN 
            {
              SymbolOut RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperation v = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolOut(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
