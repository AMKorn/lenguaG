
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package lenguag.syntactic;

import lenguag.syntactic.symbols.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\002\004\000\002\006" +
    "\011\000\002\003\005\000\002\003\004\000\002\003\002" +
    "\000\002\004\004\000\002\004\003\000\002\005\006\000" +
    "\002\005\006\000\002\005\004\000\002\014\012\000\002" +
    "\007\004\000\002\007\002\000\002\010\005\000\002\010" +
    "\002\000\002\011\004\000\002\012\004\000\002\012\002" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\004\000\002\013" +
    "\004\000\002\020\005\000\002\020\005\000\002\021\005" +
    "\000\002\017\003\000\002\017\005\000\002\017\005\000" +
    "\002\017\004\000\002\025\005\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\016" +
    "\004\000\002\032\006\000\002\032\002\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\003\000\002\033\005\000\002\034\005\000\002\034" +
    "\003\000\002\035\003\000\002\035\003\000\002\036\012" +
    "\000\002\037\004\000\002\037\006\000\002\037\002\000" +
    "\002\040\011\000\002\041\015\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\043" +
    "\006\000\002\044\004\000\002\044\002\000\002\045\005" +
    "\000\002\045\002\000\002\022\004\000\002\022\004\000" +
    "\002\022\003\000\002\023\006\000\002\024\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\016\004\ufffc\005\004\007\011\010\012\011" +
    "\016\012\015\001\002\000\012\007\011\010\012\011\016" +
    "\012\015\001\002\000\006\023\ufffa\032\ufffa\001\002\000" +
    "\004\004\247\001\002\000\004\002\245\001\002\000\004" +
    "\051\021\001\002\000\006\026\020\051\uffc9\001\002\000" +
    "\006\026\020\051\uffc9\001\002\000\004\032\027\001\002" +
    "\000\016\004\ufffc\005\004\007\011\010\012\011\016\012" +
    "\015\001\002\000\004\051\uffc1\001\002\000\006\026\020" +
    "\051\uffc9\001\002\000\004\051\uffc2\001\002\000\004\051" +
    "\021\001\002\000\054\022\uffc9\023\uffc9\026\020\027\uffc9" +
    "\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9" +
    "\045\uffc9\046\uffc9\047\uffc9\050\uffc9\001\002\000\004\027" +
    "\023\001\002\000\056\022\uffc9\023\uffc9\026\020\027\uffc9" +
    "\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9" +
    "\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\001\002\000" +
    "\054\022\uffca\023\uffca\027\uffca\030\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041" +
    "\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca" +
    "\050\uffca\051\uffca\001\002\000\052\022\uffcb\023\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\001\002\000\004" +
    "\004\ufffd\001\002\000\016\004\ufffc\005\004\007\011\010" +
    "\012\011\016\012\015\001\002\000\004\004\ufffe\001\002" +
    "\000\004\051\uffc3\001\002\000\004\051\uffc4\001\002\000" +
    "\010\022\034\030\035\032\ufff7\001\002\000\014\007\011" +
    "\010\012\011\016\012\015\023\ufff4\001\002\000\020\006" +
    "\045\022\046\026\040\051\021\052\037\053\036\054\041" +
    "\001\002\000\044\023\uffc7\027\uffc7\031\uffc7\032\uffc7\034" +
    "\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7" +
    "\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\001" +
    "\002\000\044\023\uffc8\027\uffc8\031\uffc8\032\uffc8\034\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043" +
    "\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\001\002" +
    "\000\014\026\040\051\021\052\037\053\036\054\041\001" +
    "\002\000\044\023\uffc5\027\uffc5\031\uffc5\032\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\001\002" +
    "\000\046\022\100\023\uffce\027\uffce\031\uffce\032\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce" +
    "\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\001" +
    "\002\000\040\023\uffe1\032\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045" +
    "\uffe1\046\uffe1\047\uffe1\050\uffe1\001\002\000\044\023\uffc6" +
    "\027\uffc6\031\uffc6\032\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\001\002\000\020\006\045\022" +
    "\046\026\040\051\021\052\037\053\036\054\041\001\002" +
    "\000\020\006\045\022\046\026\040\051\021\052\037\053" +
    "\036\054\041\001\002\000\040\023\ufff9\032\ufff9\034\063" +
    "\035\065\036\064\037\066\040\060\041\070\042\053\043" +
    "\061\044\055\045\067\046\057\047\071\050\062\001\002" +
    "\000\006\023\ufff8\032\ufff8\001\002\000\044\023\uffcd\027" +
    "\uffcd\031\uffcd\032\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\001\002\000\044\023\uffcc\027\uffcc" +
    "\031\uffcc\032\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc" +
    "\047\uffcc\050\uffcc\001\002\000\020\006\uffd6\022\uffd6\026" +
    "\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\001\002\000\020" +
    "\006\045\022\046\026\040\051\021\052\037\053\036\054" +
    "\041\001\002\000\020\006\uffd3\022\uffd3\026\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\054\uffd3\001\002\000\020\006\uffd5\022" +
    "\uffd5\026\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\001\002" +
    "\000\020\006\uffd1\022\uffd1\026\uffd1\051\uffd1\052\uffd1\053" +
    "\uffd1\054\uffd1\001\002\000\020\006\uffd8\022\uffd8\026\uffd8" +
    "\051\uffd8\052\uffd8\053\uffd8\054\uffd8\001\002\000\020\006" +
    "\uffd4\022\uffd4\026\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4" +
    "\001\002\000\020\006\uffcf\022\uffcf\026\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\054\uffcf\001\002\000\020\006\uffdc\022\uffdc" +
    "\026\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\001\002\000" +
    "\020\006\uffda\022\uffda\026\uffda\051\uffda\052\uffda\053\uffda" +
    "\054\uffda\001\002\000\020\006\uffdb\022\uffdb\026\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\001\002\000\020\006\uffd9" +
    "\022\uffd9\026\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\001" +
    "\002\000\020\006\uffd2\022\uffd2\026\uffd2\051\uffd2\052\uffd2" +
    "\053\uffd2\054\uffd2\001\002\000\020\006\uffd7\022\uffd7\026" +
    "\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\001\002\000\020" +
    "\006\uffd0\022\uffd0\026\uffd0\051\uffd0\052\uffd0\053\uffd0\054" +
    "\uffd0\001\002\000\006\023\uffdd\032\uffdd\001\002\000\036" +
    "\023\076\034\063\035\065\036\064\037\066\040\060\041" +
    "\070\042\053\043\061\044\055\045\067\046\057\047\071" +
    "\050\062\001\002\000\004\023\075\001\002\000\040\023" +
    "\uffdf\032\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\001\002\000\040\023\uffe0\032\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\001\002" +
    "\000\040\023\uffde\032\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde" +
    "\046\uffde\047\uffde\050\uffde\001\002\000\016\023\uffaf\026" +
    "\040\051\021\052\037\053\036\054\041\001\002\000\004" +
    "\023\107\001\002\000\006\023\uffad\031\103\001\002\000" +
    "\014\026\040\051\021\052\037\053\036\054\041\001\002" +
    "\000\004\023\uffb0\001\002\000\006\023\uffad\031\103\001" +
    "\002\000\004\023\uffae\001\002\000\044\023\uffb1\027\uffb1" +
    "\031\uffb1\032\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040" +
    "\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1" +
    "\047\uffb1\050\uffb1\001\002\000\006\027\112\031\111\001" +
    "\002\000\014\026\040\051\021\052\037\053\036\054\041" +
    "\001\002\000\044\023\uffbe\027\uffbe\031\uffbe\032\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\001" +
    "\002\000\044\023\uffc0\027\uffc0\031\uffc0\032\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043" +
    "\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\001\002" +
    "\000\006\027\112\031\111\001\002\000\044\023\uffbf\027" +
    "\uffbf\031\uffbf\032\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046" +
    "\uffbf\047\uffbf\050\uffbf\001\002\000\004\023\126\001\002" +
    "\000\006\023\ufff2\031\122\001\002\000\004\051\021\001" +
    "\002\000\006\023\ufff1\031\ufff1\001\002\000\012\007\011" +
    "\010\012\011\016\012\015\001\002\000\004\023\ufff5\001" +
    "\002\000\006\023\ufff2\031\122\001\002\000\004\023\ufff3" +
    "\001\002\000\004\024\127\001\002\000\034\005\004\007" +
    "\011\010\012\011\016\012\015\013\145\015\134\016\144" +
    "\017\150\020\142\021\143\025\uffef\051\021\001\002\000" +
    "\004\032\244\001\002\000\034\005\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\015\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\025\uffe8\051\uffe8\001\002\000\004\032\243" +
    "\001\002\000\004\032\242\001\002\000\004\022\234\001" +
    "\002\000\010\022\100\030\230\033\227\001\002\000\034" +
    "\005\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\015" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\025\uffe9\051\uffe9" +
    "\001\002\000\004\025\226\001\002\000\004\051\021\001" +
    "\002\000\034\005\004\007\011\010\012\011\016\012\015" +
    "\013\145\015\134\016\144\017\150\020\142\021\143\025" +
    "\uffef\051\021\001\002\000\004\022\221\001\002\000\004" +
    "\022\216\001\002\000\004\022\200\001\002\000\004\022" +
    "\162\001\002\000\004\032\161\001\002\000\004\032\160" +
    "\001\002\000\022\006\045\022\046\026\040\032\uffaa\051" +
    "\021\052\037\053\036\054\041\001\002\000\004\032\155" +
    "\001\002\000\034\005\uffe7\007\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\025\uffe7\051\uffe7\001\002\000\004\032\154\001\002\000" +
    "\034\005\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec" +
    "\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\025\uffec\051" +
    "\uffec\001\002\000\034\005\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\025\uffe5\051\uffe5\001\002\000\036\032\uffac\034\063" +
    "\035\065\036\064\037\066\040\060\041\070\042\053\043" +
    "\061\044\055\045\067\046\057\047\071\050\062\001\002" +
    "\000\004\032\uffab\001\002\000\034\005\uffed\007\uffed\010" +
    "\uffed\011\uffed\012\uffed\013\uffed\015\uffed\016\uffed\017\uffed" +
    "\020\uffed\021\uffed\025\uffed\051\uffed\001\002\000\034\005" +
    "\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\015\uffee" +
    "\016\uffee\017\uffee\020\uffee\021\uffee\025\uffee\051\uffee\001" +
    "\002\000\020\006\045\022\046\026\040\051\021\052\037" +
    "\053\036\054\041\001\002\000\004\023\166\001\002\000" +
    "\040\023\uffbd\032\uffbd\034\063\035\065\036\064\037\066" +
    "\040\060\041\070\042\053\043\061\044\055\045\067\046" +
    "\057\047\071\050\062\001\002\000\006\023\uffbc\032\uffbc" +
    "\001\002\000\004\024\167\001\002\000\034\005\004\007" +
    "\011\010\012\011\016\012\015\013\145\015\134\016\144" +
    "\017\150\020\142\021\143\025\uffef\051\021\001\002\000" +
    "\004\025\171\001\002\000\036\005\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\013\uffb8\014\173\015\uffb8\016\uffb8\017" +
    "\uffb8\020\uffb8\021\uffb8\025\uffb8\051\uffb8\001\002\000\034" +
    "\005\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\025\uffbb\051\uffbb" +
    "\001\002\000\006\013\145\024\174\001\002\000\034\005" +
    "\004\007\011\010\012\011\016\012\015\013\145\015\134" +
    "\016\144\017\150\020\142\021\143\025\uffef\051\021\001" +
    "\002\000\034\005\uffba\007\uffba\010\uffba\011\uffba\012\uffba" +
    "\013\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\025" +
    "\uffba\051\uffba\001\002\000\004\025\177\001\002\000\034" +
    "\005\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\025\uffb9\051\uffb9" +
    "\001\002\000\016\005\004\007\011\010\012\011\016\012" +
    "\015\051\021\001\002\000\004\032\206\001\002\000\006" +
    "\023\uffb3\032\uffb3\001\002\000\006\023\uffb4\032\uffb4\001" +
    "\002\000\006\023\uffb5\032\uffb5\001\002\000\006\023\uffb2" +
    "\032\uffb2\001\002\000\020\006\045\022\046\026\040\051" +
    "\021\052\037\053\036\054\041\001\002\000\004\032\210" +
    "\001\002\000\016\005\004\007\011\010\012\011\016\012" +
    "\015\051\021\001\002\000\004\023\212\001\002\000\004" +
    "\024\213\001\002\000\034\005\004\007\011\010\012\011" +
    "\016\012\015\013\145\015\134\016\144\017\150\020\142" +
    "\021\143\025\uffef\051\021\001\002\000\004\025\215\001" +
    "\002\000\034\005\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6" +
    "\013\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\025" +
    "\uffb6\051\uffb6\001\002\000\014\026\040\051\021\052\037" +
    "\053\036\054\041\001\002\000\004\023\220\001\002\000" +
    "\004\032\uffa8\001\002\000\004\051\021\001\002\000\004" +
    "\023\223\001\002\000\004\032\uffa9\001\002\000\004\025" +
    "\ufff0\001\002\000\010\023\ufff7\030\035\032\ufff7\001\002" +
    "\000\016\004\ufff6\005\ufff6\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\001\002\000\004\051\021\001\002\000\020\006\045" +
    "\022\046\026\040\051\021\052\037\053\036\054\041\001" +
    "\002\000\040\023\uffe3\032\uffe3\034\063\035\065\036\064" +
    "\037\066\040\060\041\070\042\053\043\061\044\055\045" +
    "\067\046\057\047\071\050\062\001\002\000\006\023\uffe4" +
    "\032\uffe4\001\002\000\006\023\uffe2\032\uffe2\001\002\000" +
    "\020\006\045\022\046\026\040\051\021\052\037\053\036" +
    "\054\041\001\002\000\004\023\236\001\002\000\004\024" +
    "\237\001\002\000\034\005\004\007\011\010\012\011\016" +
    "\012\015\013\145\015\134\016\144\017\150\020\142\021" +
    "\143\025\uffef\051\021\001\002\000\004\025\241\001\002" +
    "\000\034\005\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013" +
    "\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\025\uffb7" +
    "\051\uffb7\001\002\000\034\005\uffea\007\uffea\010\uffea\011" +
    "\uffea\012\uffea\013\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\025\uffea\051\uffea\001\002\000\034\005\uffeb\007" +
    "\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\015\uffeb\016\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\025\uffeb\051\uffeb\001\002\000" +
    "\034\005\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\025\uffe6\051" +
    "\uffe6\001\002\000\004\002\001\001\002\000\004\002\000" +
    "\001\002\000\004\022\250\001\002\000\014\007\011\010" +
    "\012\011\016\012\015\023\ufff4\001\002\000\004\023\252" +
    "\001\002\000\004\024\253\001\002\000\034\005\004\007" +
    "\011\010\012\011\016\012\015\013\145\015\134\016\144" +
    "\017\150\020\142\021\143\025\uffef\051\021\001\002\000" +
    "\004\025\255\001\002\000\004\002\uffff\001\002\000\006" +
    "\023\ufffb\032\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\016\002\006\003\005\004\012\005\004\014" +
    "\013\015\007\001\001\000\006\005\255\015\137\001\001" +
    "\000\002\001\001\000\004\006\245\001\001\000\002\001" +
    "\001\000\004\016\032\001\001\000\004\032\031\001\001" +
    "\000\004\032\030\001\001\000\002\001\001\000\014\003" +
    "\025\004\012\005\004\014\013\015\007\001\001\000\002" +
    "\001\001\000\004\032\016\001\001\000\002\001\001\000" +
    "\004\016\021\001\001\000\004\032\024\001\001\000\002" +
    "\001\001\000\004\032\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\027\004\012" +
    "\005\004\014\013\015\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\115\011\116\015\117\001\001\000\020\016\041\017" +
    "\046\025\047\026\042\031\050\033\043\043\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\016\041\026" +
    "\107\031\050\033\043\043\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\016\041\017\076\026\042\031\050\033\043\043\051" +
    "\001\001\000\020\016\041\017\072\025\073\026\042\031" +
    "\050\033\043\043\051\001\001\000\006\027\053\030\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\016\041\017\071\026\042" +
    "\031\050\033\043\043\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\053\030\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\016" +
    "\041\026\101\031\050\033\043\043\051\044\100\001\001" +
    "\000\002\001\001\000\004\045\103\001\001\000\014\016" +
    "\041\026\104\031\050\033\043\043\051\001\001\000\002" +
    "\001\001\000\004\045\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\112\001\001\000\014\016\041" +
    "\026\113\031\050\033\043\043\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\122\001\001\000" +
    "\004\016\120\001\001\000\002\001\001\000\006\011\123" +
    "\015\117\001\001\000\002\001\001\000\004\010\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\145" +
    "\005\004\012\136\013\140\015\137\016\134\020\146\021" +
    "\152\022\132\023\127\024\150\036\135\040\130\041\151" +
    "\043\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\224\001\001\000\040\004\145\005\004\012\223\013\140" +
    "\015\137\016\134\020\146\021\152\022\132\023\127\024" +
    "\150\036\135\040\130\041\151\043\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\041" +
    "\017\155\025\156\026\042\031\050\033\043\043\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\053\030" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\016\041\017\163\025\164\026\042\031" +
    "\050\033\043\035\162\043\051\001\001\000\002\001\001" +
    "\000\006\027\053\030\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\145\005\004\012\167\013\140" +
    "\015\137\016\134\020\146\021\152\022\132\023\127\024" +
    "\150\036\135\040\130\041\151\043\131\001\001\000\002" +
    "\001\001\000\004\037\171\001\001\000\002\001\001\000" +
    "\004\036\174\001\001\000\040\004\145\005\004\012\175" +
    "\013\140\015\137\016\134\020\146\021\152\022\132\023" +
    "\127\024\150\036\135\040\130\041\151\043\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\203\005\004\015\137\016\134\020\202\021\201" +
    "\042\200\043\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\016\041\017\163\025\164\026\042\031\050\033" +
    "\043\035\206\043\051\001\001\000\002\001\001\000\022" +
    "\004\203\005\004\015\137\016\134\020\202\021\201\042" +
    "\210\043\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\004\145\005\004\012\213\013\140\015\137\016" +
    "\134\020\146\021\152\022\132\023\127\024\150\036\135" +
    "\040\130\041\151\043\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\016\041\026\216\031\050\033\043" +
    "\043\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\232\001\001\000\020\016\041\017\230\025\231" +
    "\026\042\031\050\033\043\043\051\001\001\000\006\027" +
    "\053\030\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\016\041\017\163\025\164\026\042\031\050\033" +
    "\043\035\234\043\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\004\145\005\004\012\237\013\140\015" +
    "\137\016\134\020\146\021\152\022\132\023\127\024\150" +
    "\036\135\040\130\041\151\043\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\250\011\116\015\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\145\005" +
    "\004\012\253\013\140\015\137\016\134\020\146\021\152" +
    "\022\132\023\127\024\150\036\135\040\130\041\151\043" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /**********************************************************************
     * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
     **********************************************************************/

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        report_error("Error sintàctic catastròfic", cur_token);
        done_parsing();        
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        report_error("de sintaxis", cur_token);
    }

    @Override
    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder("ERROR");
        if (info instanceof Symbol) {
            ComplexSymbol token = (ComplexSymbol)info;
            Location l = token.getLeft();
            
            if (l != null) {
                msg.append(" (fila: ")
                   .append(l.getLine())
                   .append(", columna: ")
                   .append(l.getColumn())
                   .append(")");
            }
        }
        msg.append(": ").append(message);
        
        System.err.println(msg);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error catastròfic ("+message+")", info);
        done_parsing();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= BODY EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolBody start_val = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // BODY ::= DECLARATIONS MAIN 
            {
              SymbolBody RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolDecs v1 = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolMain v2 = (SymbolMain)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBody(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAIN ::= RES_MAIN L_PAREN ARGS R_PAREN L_KEY INSTRUCTIONS R_KEY 
            {
              SymbolMain RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolArgs v1 = (SymbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolInstrs v2 = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolMain(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARATIONS ::= DECLARATION ENDLINE DECLARATIONS 
            {
              SymbolDecs RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolDec v1 = (SymbolDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDecs v2 = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecs(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARATIONS ::= FUNCTION DECLARATIONS 
            {
              SymbolDecs RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFunc v1 = (SymbolFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDecs v2 = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecs(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARATIONS ::= 
            {
              SymbolDecs RESULT =null;
		 RESULT = new SymbolDecs(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARATION ::= CONSTANT CONT_DECLARATION 
            {
              SymbolDec RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDecCont v = (SymbolDecCont)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDec(v, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARATION ::= CONT_DECLARATION 
            {
              SymbolDec RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDecCont v = (SymbolDecCont)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDec(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONT_DECLARATION ::= TYPE VARIABLE EQUAL EXPRESSION 
            {
              SymbolDecCont RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolType v1 = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolVar v2 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpr v3 = (SymbolExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecCont(v1, v2, v3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_DECLARATION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONT_DECLARATION ::= TYPE VARIABLE EQUAL OPERATION 
            {
              SymbolDecCont RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolType v1 = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolVar v2 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOper v3 = (SymbolOper)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecCont(v1, v2, v3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_DECLARATION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONT_DECLARATION ::= TYPE VARIABLE 
            {
              SymbolDecCont RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolType v1 = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolVar v2 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecCont(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_DECLARATION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCTION ::= TYPE VARIABLE L_PAREN ARGS R_PAREN L_KEY INSTRUCTIONS R_KEY 
            {
              SymbolFunc RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		SymbolType v1 = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolVar v2 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolArgs v3 = (SymbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolInstrs v4 = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolFunc(v1, v2, v3, v4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ARGS ::= ARG MORE_ARGS 
            {
              SymbolArgs RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolArg v1 = (SymbolArg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArgs v2 = (SymbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArgs(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ARGS ::= 
            {
              SymbolArgs RESULT =null;
		 RESULT = new SymbolArgs(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MORE_ARGS ::= COMMA ARG MORE_ARGS 
            {
              SymbolArgs RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolArg v1 = (SymbolArg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArgs v2 = (SymbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArgs(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MORE_ARGS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MORE_ARGS ::= 
            {
              SymbolArgs RESULT =null;
		 RESULT = new SymbolArgs(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MORE_ARGS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARG ::= TYPE VARIABLE 
            {
              SymbolArg RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolType v1 = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolVar v2 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArg(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCTIONS ::= INSTRUCTION INSTRUCTIONS 
            {
              SymbolInstrs RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolInstr v1 = (SymbolInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolInstrs v2 = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstrs(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCTIONS ::= 
            {
              SymbolInstrs RESULT =null;
		 RESULT = new SymbolInstrs(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCTION ::= DECLARATION ENDLINE 
            {
              SymbolInstr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolDec v = (SymbolDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolInstr(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCTION ::= ASSIGNATION ENDLINE 
            {
              SymbolInstr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolAssign v = (SymbolAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolInstr(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCTION ::= SWAP ENDLINE 
            {
              SymbolInstr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolSwap v = (SymbolSwap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolInstr(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCTION ::= FUNCTION_CALL ENDLINE 
            {
              SymbolInstr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFuncCall v = (SymbolFuncCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolInstr(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCTION ::= RETURN ENDLINE 
            {
              SymbolInstr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolReturn v = (SymbolReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolInstr(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCTION ::= IF 
            {
              SymbolInstr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolIf v = (SymbolIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCTION ::= LOOP 
            {
              SymbolInstr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolLoop v = (SymbolLoop)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCTION ::= FOR 
            {
              SymbolInstr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolFor v = (SymbolFor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCTION ::= IN ENDLINE 
            {
              SymbolInstr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolIn v = (SymbolIn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolInstr(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCTION ::= OUT ENDLINE 
            {
              SymbolInstr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOut v = (SymbolOut)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolInstr(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASSIGNATION ::= VARIABLE EQUAL OPERATION 
            {
              SymbolAssign RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolVar v1 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOper v2 = (SymbolOper)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAssign(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASSIGNATION ::= VARIABLE EQUAL EXPRESSION 
            {
              SymbolAssign RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolVar v1 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpr v2 = (SymbolExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAssign(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SWAP ::= VARIABLE OP_SWAP VARIABLE 
            {
              SymbolSwap RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolVar v1 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolVar v2 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolSwap(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWAP",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESSION ::= VALUE 
            {
              SymbolExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolExpr(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESSION ::= L_PAREN EXPRESSION R_PAREN 
            {
              SymbolExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpr v = (SymbolExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolExpr(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESSION ::= L_PAREN OPERATION R_PAREN 
            {
              SymbolExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOper v = (SymbolOper)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolExpr(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESSION ::= NOT EXPRESSION 
            {
              SymbolExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpr v1 = (SymbolExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolExpr(v1, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERATION ::= EXPRESSION OP EXPRESSION 
            {
              SymbolOper RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolExpr v1 = (SymbolExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOp v2 = (SymbolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpr v3 = (SymbolExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOper(v1, v2, v3) 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OP ::= ADD 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.ADD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OP ::= SUB 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.SUB); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OP ::= PROD 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.PROD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OP ::= DIV 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.DIV); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OP ::= MOD 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.MOD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OP ::= OR 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.OR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OP ::= AND 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.AND); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OP ::= OP_REL 
            {
              SymbolOp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOpRel v = (SymbolOpRel)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOp(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OP_REL ::= IS_EQUAL 
            {
              SymbolOpRel RESULT =null;
		 RESULT = new SymbolOpRel(ParserSym.IS_EQUAL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP_REL ::= BIGGER 
            {
              SymbolOpRel RESULT =null;
		 RESULT = new SymbolOpRel(ParserSym.IS_EQUAL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OP_REL ::= BEQ 
            {
              SymbolOpRel RESULT =null;
		 RESULT = new SymbolOpRel(ParserSym.BEQ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OP_REL ::= LESSER 
            {
              SymbolOpRel RESULT =null;
		 RESULT = new SymbolOpRel(ParserSym.LESSER); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OP_REL ::= LEQ 
            {
              SymbolOpRel RESULT =null;
		 RESULT = new SymbolOpRel(ParserSym.LEQ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OP_REL ::= NEQ 
            {
              SymbolOpRel RESULT =null;
		 RESULT = new SymbolOpRel(ParserSym.NEQ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALUE ::= VARIABLE 
            {
              SymbolValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolVar v = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolValue(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALUE ::= FIXED_VALUE 
            {
              SymbolValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolValue(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VALUE ::= FUNCTION_CALL 
            {
              SymbolValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolFuncCall v = (SymbolFuncCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolValue(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VARIABLE ::= IDENTIFIER ARRAY_SUFFIX 
            {
              SymbolVar RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArrSuff v2 = (SymbolArrSuff)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolVar(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARRAY_SUFFIX ::= L_BRACKET VARIABLE R_BRACKET ARRAY_SUFFIX 
            {
              SymbolArrSuff RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolVar v1 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArrSuff v2 = (SymbolArrSuff)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArrSuff(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_SUFFIX",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARRAY_SUFFIX ::= 
            {
              SymbolArrSuff RESULT =null;
		 RESULT = new SymbolArrSuff(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_SUFFIX",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FIXED_VALUE ::= INTEGER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; /* Returns Integer */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIXED_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FIXED_VALUE ::= CHARACTER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character v = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; /* Returns Character */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIXED_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FIXED_VALUE ::= LIST 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolList v = (SymbolList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; /* Returns SymbolList */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIXED_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FIXED_VALUE ::= BOOLEAN 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean v = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; /* Returns Integer */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIXED_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TYPE ::= TYPE_INTEGER ARRAY_SUFFIX 
            {
              SymbolType RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArrSuff v = (SymbolArrSuff)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolType(ParserSym.TYPE_INTEGER, v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TYPE ::= TYPE_CHARACTER ARRAY_SUFFIX 
            {
              SymbolType RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArrSuff v = (SymbolArrSuff)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolType(ParserSym.TYPE_CHARACTER, v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TYPE ::= TYPE_BOOLEAN ARRAY_SUFFIX 
            {
              SymbolType RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArrSuff v = (SymbolArrSuff)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolType(ParserSym.TYPE_BOOLEAN, v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TYPE ::= TYPE_VOID 
            {
              SymbolType RESULT =null;
		 RESULT = new SymbolType(ParserSym.TYPE_VOID); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LIST ::= L_BRACKET VALUE CONT_LIST 
            {
              SymbolList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolValue v1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolList v2 = (SymbolList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolList(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIST",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONT_LIST ::= COMMA VALUE CONT_LIST 
            {
              SymbolList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolValue v1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolList v2 = (SymbolList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolList(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_LIST",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONT_LIST ::= R_BRACKET 
            {
              SymbolList RESULT =null;
		 RESULT = new SymbolList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_LIST",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONDITION ::= EXPRESSION 
            {
              SymbolCond RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpr v = (SymbolExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolCond(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CONDITION ::= OPERATION 
            {
              SymbolCond RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOper v = (SymbolOper)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolCond(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IF ::= RES_IF L_PAREN CONDITION R_PAREN L_KEY INSTRUCTIONS R_KEY ELSE 
            {
              SymbolIf RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolCond v1 = (SymbolCond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolInstrs v2 = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolElse v3 = (SymbolElse)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolIf(v1, v2, v3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ELSE ::= RES_ELSE IF 
            {
              SymbolElse RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolIf v = (SymbolIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolElse(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ELSE ::= RES_ELSE L_KEY INSTRUCTIONS R_KEY 
            {
              SymbolElse RESULT =null;
		 RESULT = new SymbolElse(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ELSE ::= 
            {
              SymbolElse RESULT =null;
		 RESULT = new SymbolElse(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LOOP ::= RES_WHILE L_PAREN CONDITION R_PAREN L_KEY INSTRUCTIONS R_KEY 
            {
              SymbolLoop RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolCond v1 = (SymbolCond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolInstrs v2 = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolLoop(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FOR ::= RES_FOR L_PAREN HEADER_SEGMENT ENDLINE CONDITION ENDLINE HEADER_SEGMENT R_PAREN L_KEY INSTRUCTIONS R_KEY 
            {
              SymbolFor RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		SymbolHeaderSeg v1 = (SymbolHeaderSeg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolCond v2 = (SymbolCond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolHeaderSeg v3 = (SymbolHeaderSeg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolInstrs v4 = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolFor(v1, v2, v3, v4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // HEADER_SEGMENT ::= DECLARATION 
            {
              SymbolHeaderSeg RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDec v = (SymbolDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolHeaderSeg(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HEADER_SEGMENT",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // HEADER_SEGMENT ::= ASSIGNATION 
            {
              SymbolHeaderSeg RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolAssign v = (SymbolAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolHeaderSeg(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HEADER_SEGMENT",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // HEADER_SEGMENT ::= SWAP 
            {
              SymbolHeaderSeg RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolSwap v = (SymbolSwap)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolHeaderSeg(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HEADER_SEGMENT",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // HEADER_SEGMENT ::= FUNCTION_CALL 
            {
              SymbolHeaderSeg RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolFuncCall v = (SymbolFuncCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolHeaderSeg(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HEADER_SEGMENT",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FUNCTION_CALL ::= VARIABLE L_PAREN PARAMS R_PAREN 
            {
              SymbolFuncCall RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolVar v1 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolParams v2 = (SymbolParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolFuncCall(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PARAMS ::= VALUE MORE_PARAMS 
            {
              SymbolParams RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolValue v1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolParams v2 = (SymbolParams)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolParams(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PARAMS ::= 
            {
              SymbolParams RESULT =null;
		 RESULT = new SymbolParams(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MORE_PARAMS ::= COMMA VALUE MORE_PARAMS 
            {
              SymbolParams RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolValue v1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolParams v2 = (SymbolParams)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolParams(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MORE_PARAMS",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // MORE_PARAMS ::= 
            {
              SymbolParams RESULT =null;
		 RESULT = new SymbolParams(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MORE_PARAMS",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // RETURN ::= RES_RETURN EXPRESSION 
            {
              SymbolReturn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpr v = (SymbolExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolReturn(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // RETURN ::= RES_RETURN OPERATION 
            {
              SymbolReturn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOper v = (SymbolOper)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolReturn(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // RETURN ::= RES_RETURN 
            {
              SymbolReturn RESULT =null;
		 RESULT = new SymbolReturn(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IN ::= RES_IN L_PAREN VARIABLE R_PAREN 
            {
              SymbolIn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolVar v = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolIn(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IN",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OUT ::= RES_OUT L_PAREN VALUE R_PAREN 
            {
              SymbolOut RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolOut(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
