
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package lenguag.syntactic;

import lenguag.*;
import lenguag.syntactic.symbols.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\006\006\000\002\003\005\000\002\003\004" +
    "\000\002\003\002\000\002\003\004\000\002\004\004\000" +
    "\002\004\003\000\002\005\006\000\002\005\004\000\002" +
    "\014\012\000\002\007\004\000\002\007\002\000\002\010" +
    "\005\000\002\010\002\000\002\011\004\000\002\012\004" +
    "\000\002\012\002\000\002\013\004\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\004\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\017\005\000\002\020\005\000\002\024\005\000" +
    "\002\024\003\000\002\025\003\000\002\025\005\000\002" +
    "\025\004\000\002\025\004\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\016\004" +
    "\000\002\032\006\000\002\032\002\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\005\000\002\033\005\000\002\033\003" +
    "\000\002\034\005\000\002\034\003\000\002\035\012\000" +
    "\002\036\004\000\002\036\006\000\002\036\002\000\002" +
    "\037\011\000\002\040\015\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\041\006" +
    "\000\002\042\004\000\002\042\002\000\002\043\005\000" +
    "\002\043\002\000\002\021\004\000\002\021\003\000\002" +
    "\022\006\000\002\023\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\022\002\ufffb\003\011\004\ufffb\005\005\007" +
    "\012\010\013\011\017\012\016\001\002\000\006\023\ufff8" +
    "\032\ufff8\001\002\000\012\007\012\010\013\011\017\012" +
    "\016\001\002\000\006\002\uffff\004\251\001\002\000\004" +
    "\002\247\001\002\000\006\026\024\051\025\001\002\000" +
    "\022\002\ufffb\003\011\004\ufffb\005\005\007\012\010\013" +
    "\011\017\012\016\001\002\000\006\026\uffc1\051\uffc1\001" +
    "\002\000\006\026\uffc0\051\uffc0\001\002\000\022\002\ufffb" +
    "\003\011\004\ufffb\005\005\007\012\010\013\011\017\012" +
    "\016\001\002\000\004\032\020\001\002\000\006\026\uffbe" +
    "\051\uffbe\001\002\000\006\026\uffbf\051\uffbf\001\002\000" +
    "\022\002\ufffb\003\011\004\ufffb\005\005\007\012\010\013" +
    "\011\017\012\016\001\002\000\006\002\ufffd\004\ufffd\001" +
    "\002\000\006\002\ufffc\004\ufffc\001\002\000\006\002\ufffa" +
    "\004\ufffa\001\002\000\004\027\246\001\002\000\012\022" +
    "\uffc6\026\237\030\221\032\ufff6\001\002\000\004\022\027" +
    "\001\002\000\014\007\012\010\013\011\017\012\016\023" +
    "\ufff3\001\002\000\004\023\040\001\002\000\006\023\ufff1" +
    "\031\034\001\002\000\006\026\024\051\033\001\002\000" +
    "\006\023\ufff0\031\ufff0\001\002\000\012\007\012\010\013" +
    "\011\017\012\016\001\002\000\004\023\ufff4\001\002\000" +
    "\006\023\ufff1\031\034\001\002\000\004\023\ufff2\001\002" +
    "\000\004\024\041\001\002\000\036\003\057\005\005\007" +
    "\012\010\013\011\017\012\016\013\061\015\047\016\060" +
    "\017\064\020\055\021\056\025\uffee\051\046\001\002\000" +
    "\004\032\245\001\002\000\036\003\uffe7\005\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\013\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\021\uffe7\025\uffe7\051\uffe7\001\002\000\004" +
    "\032\244\001\002\000\004\032\243\001\002\000\054\022" +
    "\uffc6\023\uffc6\026\237\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\050\uffc6\001\002\000\004\022\230\001\002\000\010\022" +
    "\135\030\225\033\224\001\002\000\036\003\uffe8\005\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\025\uffe8\051\uffe8\001\002" +
    "\000\004\025\223\001\002\000\006\026\024\051\220\001" +
    "\002\000\036\003\057\005\005\007\012\010\013\011\017" +
    "\012\016\013\061\015\047\016\060\017\064\020\055\021" +
    "\056\025\uffee\051\046\001\002\000\004\022\214\001\002" +
    "\000\004\022\211\001\002\000\006\025\210\032\207\001" +
    "\002\000\004\022\171\001\002\000\004\022\155\001\002" +
    "\000\004\032\154\001\002\000\004\032\153\001\002\000" +
    "\026\006\104\022\103\026\074\032\uffa8\035\102\051\046" +
    "\052\073\053\072\054\075\055\077\001\002\000\004\032" +
    "\071\001\002\000\036\003\uffe6\005\uffe6\007\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\025\uffe6\051\uffe6\001\002\000\004\032\070" +
    "\001\002\000\036\003\uffeb\005\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\025\uffeb\051\uffeb\001\002\000\036\003\uffe4\005" +
    "\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\025\uffe4\051\uffe4\001" +
    "\002\000\044\023\uffc4\027\uffc4\031\uffc4\032\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\001\002" +
    "\000\044\023\uffc5\027\uffc5\031\uffc5\032\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5" +
    "\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\001\002\000" +
    "\024\006\104\022\103\026\074\035\102\051\046\052\073" +
    "\053\072\054\075\055\077\001\002\000\044\023\uffc2\027" +
    "\uffc2\031\uffc2\032\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046" +
    "\uffc2\047\uffc2\050\uffc2\001\002\000\046\022\135\023\uffcb" +
    "\027\uffcb\031\uffcb\032\uffcb\034\uffcb\035\uffcb\036\uffcb\037" +
    "\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\001\002\000\044\023\uffbb\027" +
    "\uffbb\031\uffbb\032\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb" +
    "\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046" +
    "\uffbb\047\uffbb\050\uffbb\001\002\000\044\023\uffdd\027\uffdd" +
    "\031\uffdd\032\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd" +
    "\047\uffdd\050\uffdd\001\002\000\044\023\uffc3\027\uffc3\031" +
    "\uffc3\032\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\050\uffc3\001\002\000\024\006\104\022\103\026\074" +
    "\035\102\051\046\052\073\053\072\054\075\055\077\001" +
    "\002\000\024\006\104\022\103\026\074\035\102\051\046" +
    "\052\073\053\072\054\075\055\077\001\002\000\024\006" +
    "\104\022\103\026\074\035\102\051\046\052\073\053\072" +
    "\054\075\055\077\001\002\000\004\032\uffa9\001\002\000" +
    "\044\023\uffde\027\uffde\031\uffde\032\uffde\034\121\035\123" +
    "\036\122\037\124\040\116\041\126\042\111\043\117\044" +
    "\113\045\125\046\115\047\127\050\120\001\002\000\044" +
    "\023\uffc9\027\uffc9\031\uffc9\032\uffc9\034\uffc9\035\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9" +
    "\045\uffc9\046\uffc9\047\uffc9\050\uffc9\001\002\000\044\023" +
    "\uffca\027\uffca\031\uffca\032\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045" +
    "\uffca\046\uffca\047\uffca\050\uffca\001\002\000\024\006\uffd3" +
    "\022\uffd3\026\uffd3\035\uffd3\051\uffd3\052\uffd3\053\uffd3\054" +
    "\uffd3\055\uffd3\001\002\000\024\006\104\022\103\026\074" +
    "\035\102\051\046\052\073\053\072\054\075\055\077\001" +
    "\002\000\024\006\uffd0\022\uffd0\026\uffd0\035\uffd0\051\uffd0" +
    "\052\uffd0\053\uffd0\054\uffd0\055\uffd0\001\002\000\024\006" +
    "\uffd2\022\uffd2\026\uffd2\035\uffd2\051\uffd2\052\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\001\002\000\024\006\uffce\022\uffce\026" +
    "\uffce\035\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce" +
    "\001\002\000\024\006\uffd5\022\uffd5\026\uffd5\035\uffd5\051" +
    "\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\001\002\000\024" +
    "\006\uffd1\022\uffd1\026\uffd1\035\uffd1\051\uffd1\052\uffd1\053" +
    "\uffd1\054\uffd1\055\uffd1\001\002\000\024\006\uffcc\022\uffcc" +
    "\026\uffcc\035\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055" +
    "\uffcc\001\002\000\024\006\uffd9\022\uffd9\026\uffd9\035\uffd9" +
    "\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\001\002\000" +
    "\024\006\uffd7\022\uffd7\026\uffd7\035\uffd7\051\uffd7\052\uffd7" +
    "\053\uffd7\054\uffd7\055\uffd7\001\002\000\024\006\uffd8\022" +
    "\uffd8\026\uffd8\035\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8" +
    "\055\uffd8\001\002\000\024\006\uffd6\022\uffd6\026\uffd6\035" +
    "\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\001\002" +
    "\000\024\006\uffcf\022\uffcf\026\uffcf\035\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\054\uffcf\055\uffcf\001\002\000\024\006\uffd4" +
    "\022\uffd4\026\uffd4\035\uffd4\051\uffd4\052\uffd4\053\uffd4\054" +
    "\uffd4\055\uffd4\001\002\000\024\006\uffcd\022\uffcd\026\uffcd" +
    "\035\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\001" +
    "\002\000\012\023\uffdf\027\uffdf\031\uffdf\032\uffdf\001\002" +
    "\000\044\023\uffdb\027\uffdb\031\uffdb\032\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\001\002\000" +
    "\004\023\133\001\002\000\044\023\uffdc\027\uffdc\031\uffdc" +
    "\032\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc" +
    "\050\uffdc\001\002\000\044\023\uffda\027\uffda\031\uffda\032" +
    "\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda" +
    "\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050" +
    "\uffda\001\002\000\026\006\104\022\103\023\uffac\026\074" +
    "\035\102\051\046\052\073\053\072\054\075\055\077\001" +
    "\002\000\004\023\144\001\002\000\006\023\uffaa\031\140" +
    "\001\002\000\024\006\104\022\103\026\074\035\102\051" +
    "\046\052\073\053\072\054\075\055\077\001\002\000\004" +
    "\023\uffad\001\002\000\006\023\uffaa\031\140\001\002\000" +
    "\004\023\uffab\001\002\000\044\023\uffae\027\uffae\031\uffae" +
    "\032\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041" +
    "\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae" +
    "\050\uffae\001\002\000\006\027\146\031\147\001\002\000" +
    "\044\023\uffb9\027\uffb9\031\uffb9\032\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044" +
    "\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\001\002\000\024" +
    "\006\104\022\103\026\074\035\102\051\046\052\073\053" +
    "\072\054\075\055\077\001\002\000\044\023\uffbc\027\uffbc" +
    "\031\uffbc\032\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\001\002\000\006\027\146\031\147\001" +
    "\002\000\044\023\uffba\027\uffba\031\uffba\032\uffba\034\uffba" +
    "\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043" +
    "\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\001\002" +
    "\000\036\003\uffec\005\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\013\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec" +
    "\025\uffec\051\uffec\001\002\000\036\003\uffed\005\uffed\007" +
    "\uffed\010\uffed\011\uffed\012\uffed\013\uffed\015\uffed\016\uffed" +
    "\017\uffed\020\uffed\021\uffed\025\uffed\051\uffed\001\002\000" +
    "\024\006\104\022\103\026\074\035\102\051\046\052\073" +
    "\053\072\054\075\055\077\001\002\000\004\023\157\001" +
    "\002\000\004\024\160\001\002\000\036\003\057\005\005" +
    "\007\012\010\013\011\017\012\016\013\061\015\047\016" +
    "\060\017\064\020\055\021\056\025\uffee\051\046\001\002" +
    "\000\004\025\162\001\002\000\040\003\uffb5\005\uffb5\007" +
    "\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\164\015\uffb5" +
    "\016\uffb5\017\uffb5\020\uffb5\021\uffb5\025\uffb5\051\uffb5\001" +
    "\002\000\036\003\uffb8\005\uffb8\007\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\025\uffb8\051\uffb8\001\002\000\006\013\061\024\165" +
    "\001\002\000\036\003\057\005\005\007\012\010\013\011" +
    "\017\012\016\013\061\015\047\016\060\017\064\020\055" +
    "\021\056\025\uffee\051\046\001\002\000\036\003\uffb7\005" +
    "\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\015\uffb7" +
    "\016\uffb7\017\uffb7\020\uffb7\021\uffb7\025\uffb7\051\uffb7\001" +
    "\002\000\004\025\170\001\002\000\036\003\uffb6\005\uffb6" +
    "\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\025\uffb6\051\uffb6\001\002" +
    "\000\016\005\005\007\012\010\013\011\017\012\016\051" +
    "\046\001\002\000\004\032\177\001\002\000\006\023\uffb0" +
    "\032\uffb0\001\002\000\006\023\uffb1\032\uffb1\001\002\000" +
    "\006\023\uffb2\032\uffb2\001\002\000\006\023\uffaf\032\uffaf" +
    "\001\002\000\024\006\104\022\103\026\074\035\102\051" +
    "\046\052\073\053\072\054\075\055\077\001\002\000\004" +
    "\032\201\001\002\000\016\005\005\007\012\010\013\011" +
    "\017\012\016\051\046\001\002\000\004\023\203\001\002" +
    "\000\004\024\204\001\002\000\036\003\057\005\005\007" +
    "\012\010\013\011\017\012\016\013\061\015\047\016\060" +
    "\017\064\020\055\021\056\025\uffee\051\046\001\002\000" +
    "\004\025\206\001\002\000\036\003\uffb3\005\uffb3\007\uffb3" +
    "\010\uffb3\011\uffb3\012\uffb3\013\uffb3\015\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\025\uffb3\051\uffb3\001\002\000\036" +
    "\003\uffe3\005\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\025\uffe3" +
    "\051\uffe3\001\002\000\036\003\uffe2\005\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\012\uffe2\013\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\025\uffe2\051\uffe2\001\002\000\024\006" +
    "\104\022\103\026\074\035\102\051\046\052\073\053\072" +
    "\054\075\055\077\001\002\000\004\023\213\001\002\000" +
    "\004\032\uffa6\001\002\000\004\051\046\001\002\000\004" +
    "\023\216\001\002\000\004\032\uffa7\001\002\000\004\025" +
    "\uffef\001\002\000\010\023\ufff6\030\221\032\ufff6\001\002" +
    "\000\024\006\104\022\103\026\074\035\102\051\046\052" +
    "\073\053\072\054\075\055\077\001\002\000\006\023\ufff7" +
    "\032\ufff7\001\002\000\022\002\ufff5\003\ufff5\004\ufff5\005" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\001\002\000\004" +
    "\051\046\001\002\000\024\006\104\022\103\026\074\035" +
    "\102\051\046\052\073\053\072\054\075\055\077\001\002" +
    "\000\006\023\uffe1\032\uffe1\001\002\000\006\023\uffe0\032" +
    "\uffe0\001\002\000\024\006\104\022\103\026\074\035\102" +
    "\051\046\052\073\053\072\054\075\055\077\001\002\000" +
    "\004\023\232\001\002\000\004\024\233\001\002\000\036" +
    "\003\057\005\005\007\012\010\013\011\017\012\016\013" +
    "\061\015\047\016\060\017\064\020\055\021\056\025\uffee" +
    "\051\046\001\002\000\004\025\235\001\002\000\036\003" +
    "\uffb4\005\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4" +
    "\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\025\uffb4\051" +
    "\uffb4\001\002\000\052\022\uffc8\023\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\001\002\000\024\006\104\022" +
    "\103\026\074\035\102\051\046\052\073\053\072\054\075" +
    "\055\077\001\002\000\004\027\241\001\002\000\054\022" +
    "\uffc6\023\uffc6\026\237\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\050\uffc6\001\002\000\052\022\uffc7\023\uffc7\027\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045" +
    "\uffc7\046\uffc7\047\uffc7\050\uffc7\001\002\000\036\003\uffea" +
    "\005\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\015" +
    "\uffea\016\uffea\017\uffea\020\uffea\021\uffea\025\uffea\051\uffea" +
    "\001\002\000\036\003\uffe9\005\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\025\uffe9\051\uffe9\001\002\000\036\003\uffe5\005" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\025\uffe5\051\uffe5\001" +
    "\002\000\006\026\uffbd\051\uffbd\001\002\000\004\002\001" +
    "\001\002\000\004\002\000\001\002\000\004\024\252\001" +
    "\002\000\036\003\057\005\005\007\012\010\013\011\017" +
    "\012\016\013\061\015\047\016\060\017\064\020\055\021" +
    "\056\025\uffee\051\046\001\002\000\004\025\254\001\002" +
    "\000\004\002\ufffe\001\002\000\006\023\ufff9\032\ufff9\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\016\002\006\003\005\004\014\005\003\014" +
    "\013\015\007\001\001\000\002\001\001\000\006\005\254" +
    "\015\052\001\001\000\004\006\247\001\001\000\002\001" +
    "\001\000\004\016\025\001\001\000\014\003\022\004\014" +
    "\005\003\014\013\015\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\021\004\014\005\003\014\013" +
    "\015\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\020\004\014\005\003\014\013" +
    "\015\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\235\001\001" +
    "\000\002\001\001\000\010\007\027\011\030\015\031\001" +
    "\001\000\002\001\001\000\004\010\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\035\015\031\001" +
    "\001\000\002\001\001\000\004\010\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\061\005\003\012" +
    "\051\013\053\015\052\016\047\017\062\020\066\021\043" +
    "\022\041\023\064\035\050\037\042\040\065\041\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\061\005\003\012\216\013" +
    "\053\015\052\016\047\017\062\020\066\021\043\022\041" +
    "\023\064\035\050\037\042\040\065\041\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\016\075\024\104\025\105\026\077\031\107" +
    "\033\100\041\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\016\075\024" +
    "\144\025\105\026\077\031\107\033\100\041\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\016\075\025\133" +
    "\026\077\031\107\033\100\041\106\001\001\000\020\016" +
    "\075\024\131\025\105\026\077\031\107\033\100\041\106" +
    "\001\001\000\016\016\075\025\130\026\077\031\107\033" +
    "\100\041\106\001\001\000\002\001\001\000\006\027\111" +
    "\030\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\016\075\025\127\026\077\031\107" +
    "\033\100\041\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\016\075\024\136\025\105\026\077\031\107\033" +
    "\100\041\106\042\135\001\001\000\002\001\001\000\004" +
    "\043\140\001\001\000\020\016\075\024\141\025\105\026" +
    "\077\031\107\033\100\041\106\001\001\000\002\001\001" +
    "\000\004\043\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\147\001\001\000\002\001\001\000\020" +
    "\016\075\024\150\025\105\026\077\031\107\033\100\041" +
    "\106\001\001\000\002\001\001\000\004\034\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\016\075\024\155\025\105\026\077\031\107\033\100" +
    "\041\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\004\061\005\003\012\160\013\053\015\052\016\047" +
    "\017\062\020\066\021\043\022\041\023\064\035\050\037" +
    "\042\040\065\041\044\001\001\000\002\001\001\000\004" +
    "\036\162\001\001\000\002\001\001\000\004\035\165\001" +
    "\001\000\040\004\061\005\003\012\166\013\053\015\052" +
    "\016\047\017\062\020\066\021\043\022\041\023\064\035" +
    "\050\037\042\040\065\041\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\174\005" +
    "\003\015\052\016\047\017\173\020\172\041\175\044\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\075" +
    "\024\177\025\105\026\077\031\107\033\100\041\106\001" +
    "\001\000\002\001\001\000\022\004\174\005\003\015\052" +
    "\016\047\017\173\020\172\041\175\044\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\004\061\005\003" +
    "\012\204\013\053\015\052\016\047\017\062\020\066\021" +
    "\043\022\041\023\064\035\050\037\042\040\065\041\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\016\075\024\211\025\105" +
    "\026\077\031\107\033\100\041\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\016\075\024\221\025\105\026\077\031\107" +
    "\033\100\041\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\226\001\001\000\020\016\075\024\225" +
    "\025\105\026\077\031\107\033\100\041\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\016\075\024\230" +
    "\025\105\026\077\031\107\033\100\041\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\004\061\005\003" +
    "\012\233\013\053\015\052\016\047\017\062\020\066\021" +
    "\043\022\041\023\064\035\050\037\042\040\065\041\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\016\075\024\237\025\105\026\077\031\107" +
    "\033\100\041\106\001\001\000\002\001\001\000\004\032" +
    "\241\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\061" +
    "\005\003\012\252\013\053\015\052\016\047\017\062\020" +
    "\066\021\043\022\041\023\064\035\050\037\042\040\065" +
    "\041\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public boolean thereIsError = false;

    /**
     * error treatment methods override 
     **/

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        report_error("Catastrophical syntactical error", cur_token);
        done_parsing();        
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        report_error("Syntactical error", cur_token);
    }

    @Override
    public void report_error(String message, Object info) {
        thereIsError = true;

        String msg = " !! ";
        msg += message;
        if (info instanceof Symbol) {
            ComplexSymbol token = (ComplexSymbol)info;
            String tokenName = token.getName();
            // If the name of the token equals the parser symbol for error, the error was lexical and should not be reported.
            if(tokenName == ParserSym.terminalNames[ParserSym.error]) return;
            msg += ": Unexpected " + tokenName;
            
            Location l = token.getLeft();
            if(token.value != null){
                msg += ": " + token.value;
            }

            if (l != null) {
                msg += " at position [line: " + l.getLine() + ", column: " + l.getColumn() + "]";
            }
        }
        
        System.err.println(msg);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Catastrophical error ("+message+")", info);
        done_parsing();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= BODY EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBody start_val = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // BODY ::= DECLARATIONS MAIN 
            {
              SymbolBody RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolDecs v1 = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolMain v2 = (SymbolMain)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 int line, column;
                if(v1xleft == null) { line = v2xleft.getLine(); column = v2xleft.getColumn(); }
                else { line = v1xleft.getLine(); column = v1xleft.getColumn(); }
                RESULT = new SymbolBody(v1, v2, line, column);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BODY ::= DECLARATIONS 
            {
              SymbolBody RESULT =null;
		 
                // Error case
                report_error("No main found", null); 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MAIN ::= RES_MAIN L_KEY INSTRUCTIONS R_KEY 
            {
              SymbolMain RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolInstrs v = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolMain(v, vxleft.getLine(), vxleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARATIONS ::= DECLARATION ENDLINE DECLARATIONS 
            {
              SymbolDecs RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolDec v1 = (SymbolDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDecs v2 = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecs(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARATIONS ::= FUNCTION DECLARATIONS 
            {
              SymbolDecs RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolFunc v1 = (SymbolFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDecs v2 = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecs(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARATIONS ::= 
            {
              SymbolDecs RESULT =null;
		 RESULT = new SymbolDecs(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARATIONS ::= error DECLARATIONS 
            {
              SymbolDecs RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDecs v = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecs(null, v, vxleft.getLine(), vxleft.getColumn()); /* If there's an error in a declaration, we go to the next one. */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARATION ::= CONSTANT CONT_DECLARATION 
            {
              SymbolDec RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDecCont v = (SymbolDecCont)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDec(v, true, cxleft.getLine(), cxleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARATION ::= CONT_DECLARATION 
            {
              SymbolDec RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDecCont v = (SymbolDecCont)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDec(v, vxleft.getLine(), vxleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONT_DECLARATION ::= TYPE IDENTIFIER EQUAL OPERATION 
            {
              SymbolDecCont RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolType v1 = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location v3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperation v3 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecCont(v1, v2, v3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_DECLARATION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONT_DECLARATION ::= TYPE IDENTIFIER 
            {
              SymbolDecCont RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolType v1 = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecCont(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_DECLARATION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCTION ::= TYPE VARIABLE L_PAREN ARGS R_PAREN L_KEY INSTRUCTIONS R_KEY 
            {
              SymbolFunc RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		SymbolType v1 = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		SymbolVar v2 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location v3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location v3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolArgs v3 = (SymbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location v4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolInstrs v4 = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolFunc(v1, v2, v3, v4, v1xleft.getLine(), v1xleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ARGS ::= ARG MORE_ARGS 
            {
              SymbolArgs RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolArg v1 = (SymbolArg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolArgs v2 = (SymbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArgs(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ARGS ::= 
            {
              SymbolArgs RESULT =null;
		 RESULT = new SymbolArgs(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MORE_ARGS ::= COMMA ARG MORE_ARGS 
            {
              SymbolArgs RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolArg v1 = (SymbolArg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolArgs v2 = (SymbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArgs(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MORE_ARGS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MORE_ARGS ::= 
            {
              SymbolArgs RESULT =null;
		 RESULT = new SymbolArgs(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MORE_ARGS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARG ::= TYPE IDENTIFIER 
            {
              SymbolArg RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolType v1 = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArg(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCTIONS ::= INSTRUCTION INSTRUCTIONS 
            {
              SymbolInstrs RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolInstr v1 = (SymbolInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolInstrs v2 = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstrs(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCTIONS ::= 
            {
              SymbolInstrs RESULT =null;
		 RESULT = new SymbolInstrs(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCTION ::= DECLARATION ENDLINE 
            {
              SymbolInstr RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolDec v = (SymbolDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCTION ::= ASSIGNATION ENDLINE 
            {
              SymbolInstr RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolAssign v = (SymbolAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCTION ::= SWAP ENDLINE 
            {
              SymbolInstr RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolSwap v = (SymbolSwap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCTION ::= FUNCTION_CALL ENDLINE 
            {
              SymbolInstr RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolFuncCall v = (SymbolFuncCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCTION ::= RETURN ENDLINE 
            {
              SymbolInstr RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolReturn v = (SymbolReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCTION ::= IF 
            {
              SymbolInstr RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolIf v = (SymbolIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCTION ::= LOOP 
            {
              SymbolInstr RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolLoop v = (SymbolLoop)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCTION ::= FOR 
            {
              SymbolInstr RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolFor v = (SymbolFor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCTION ::= IN ENDLINE 
            {
              SymbolInstr RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolIn v = (SymbolIn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCTION ::= OUT ENDLINE 
            {
              SymbolInstr RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOut v = (SymbolOut)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTRUCTION ::= error ENDLINE 
            {
              SymbolInstr RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolInstr("Error", 0, SymbolInstr.instructionType.error, vxleft.getLine(), vxleft.getColumn()); /*Error treatment*/ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSTRUCTION ::= error R_KEY 
            {
              SymbolInstr RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolInstr("Error", 0, SymbolInstr.instructionType.error, vxleft.getLine(), vxleft.getColumn()); /*Error treatment*/ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASSIGNATION ::= VARIABLE EQUAL OPERATION 
            {
              SymbolAssign RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolVar v1 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperation v2 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAssign(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SWAP ::= VARIABLE OP_SWAP VARIABLE 
            {
              SymbolSwap RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolVar v1 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolVar v2 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolSwap(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWAP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERATION ::= OPERAND OP OPERAND 
            {
              SymbolOperation RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperand v1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOp v2 = (SymbolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand v3 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperation(v1, v2, v3, v1xleft.getLine(), v1xleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERATION ::= OPERAND 
            {
              SymbolOperation RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand v1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperation(v1, v1xleft.getLine(), v1xleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERAND ::= VALUE 
            {
              SymbolOperand RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(v, vxleft.getLine(), vxleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERAND ::= L_PAREN OPERATION R_PAREN 
            {
              SymbolOperand RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperation v = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolOperand(v, vxleft.getLine(), vxleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERAND ::= NOT OPERAND 
            {
              SymbolOperand RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand v = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 v.negate(); v.line = nxleft.getLine(); v.column = nxleft.getColumn(); RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERAND ::= SUB OPERAND 
            {
              SymbolOperand RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand v = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 v.negate(); v.line = nxleft.getLine(); v.column = nxleft.getColumn(); RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OP ::= ADD 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.ADD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OP ::= SUB 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.SUB); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OP ::= PROD 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.PROD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OP ::= DIV 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.DIV); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OP ::= MOD 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.MOD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OP ::= OR 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.OR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP ::= AND 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.AND); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OP ::= OP_REL 
            {
              SymbolOp RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOp v = (SymbolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OP_REL ::= IS_EQUAL 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.IS_EQUAL, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OP_REL ::= BIGGER 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.BIGGER, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OP_REL ::= BEQ 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.BEQ, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OP_REL ::= LESSER 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.LESSER, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OP_REL ::= LEQ 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.LEQ, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OP_REL ::= NEQ 
            {
              SymbolOp RESULT =null;
		 RESULT = new SymbolOp(ParserSym.NEQ, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VALUE ::= VARIABLE 
            {
              SymbolValue RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolVar v = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolValue(v, vxleft.getLine(), vxleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VALUE ::= FIXED_VALUE 
            {
              SymbolValue RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolValue(v, vxleft.getLine(), vxleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VALUE ::= FUNCTION_CALL 
            {
              SymbolValue RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolFuncCall v = (SymbolFuncCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolValue(v, vxleft.getLine(), vxleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VARIABLE ::= IDENTIFIER ARRAY_SUFFIX 
            {
              SymbolVar RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolArrSuff v2 = (SymbolArrSuff)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolVar(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARRAY_SUFFIX ::= L_BRACKET OPERATION R_BRACKET ARRAY_SUFFIX 
            {
              SymbolArrSuff RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperation v1 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolArrSuff v2 = (SymbolArrSuff)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArrSuff(v1, v2, bxleft.getLine(), bxleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_SUFFIX",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARRAY_SUFFIX ::= 
            {
              SymbolArrSuff RESULT =null;
		 RESULT = new SymbolArrSuff(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_SUFFIX",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FIXED_VALUE ::= INTEGER 
            {
              Object RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; /* Returns Integer */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIXED_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FIXED_VALUE ::= CHARACTER 
            {
              Object RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Character v = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; /* Returns Character */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIXED_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FIXED_VALUE ::= LIST 
            {
              Object RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolList v = (SymbolList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; /* Returns SymbolList */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIXED_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FIXED_VALUE ::= BOOLEAN 
            {
              Object RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean v = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; /* Returns Integer */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIXED_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TYPE ::= TYPE_INTEGER 
            {
              SymbolType RESULT =null;
		 RESULT = new SymbolType(ParserSym.TYPE_INTEGER); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TYPE ::= TYPE_CHARACTER 
            {
              SymbolType RESULT =null;
		 RESULT = new SymbolType(ParserSym.TYPE_CHARACTER); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TYPE ::= TYPE_BOOLEAN 
            {
              SymbolType RESULT =null;
		 RESULT = new SymbolType(ParserSym.TYPE_BOOLEAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TYPE ::= TYPE_VOID 
            {
              SymbolType RESULT =null;
		 RESULT = new SymbolType(ParserSym.TYPE_VOID); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TYPE ::= TYPE L_BRACKET R_BRACKET 
            {
              SymbolType RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolType v = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymbolType(Constants.TYPE_ARRAY, v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LIST ::= L_BRACKET OPERATION CONT_LIST 
            {
              SymbolList RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperation v1 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolList v2 = (SymbolList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolList(v1, v2, bxleft.getLine(), bxleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIST",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LIST ::= STRING 
            {
              SymbolList RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolList(v, vxleft.getLine(), vxleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIST",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONT_LIST ::= COMMA OPERATION CONT_LIST 
            {
              SymbolList RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperation v1 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolList v2 = (SymbolList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolList(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_LIST",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONT_LIST ::= R_BRACKET 
            {
              SymbolList RESULT =null;
		 RESULT = new SymbolList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONT_LIST",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IF ::= RES_IF L_PAREN OPERATION R_PAREN L_KEY INSTRUCTIONS R_KEY ELSE 
            {
              SymbolIf RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		SymbolOperation v1 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolInstrs v2 = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location v3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolElse v3 = (SymbolElse)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolIf(v1, v2, v3, ixleft.getLine(), ixleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ELSE ::= RES_ELSE IF 
            {
              SymbolElse RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolIf v = (SymbolIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolElse(v, exleft.getLine(), exleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ELSE ::= RES_ELSE L_KEY INSTRUCTIONS R_KEY 
            {
              SymbolElse RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolInstrs v = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolElse(v, exleft.getLine(), exleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ELSE ::= 
            {
              SymbolElse RESULT =null;
		 RESULT = new SymbolElse(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LOOP ::= RES_WHILE L_PAREN OPERATION R_PAREN L_KEY INSTRUCTIONS R_KEY 
            {
              SymbolLoop RESULT =null;
		Location wxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location wxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolOperation v1 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolInstrs v2 = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolLoop(v1, v2, wxleft.getLine(), wxleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FOR ::= RES_FOR L_PAREN HEADER_SEGMENT ENDLINE OPERATION ENDLINE HEADER_SEGMENT R_PAREN L_KEY INSTRUCTIONS R_KEY 
            {
              SymbolFor RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xright;
		SymbolBase v1 = (SymbolBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		SymbolOperation v2 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location v3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location v3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolBase v3 = (SymbolBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location v4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolInstrs v4 = (SymbolInstrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolFor(v1, v2, v3, v4, fxleft.getLine(), fxleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // HEADER_SEGMENT ::= DECLARATION 
            {
              SymbolBase RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDec v = (SymbolDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HEADER_SEGMENT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // HEADER_SEGMENT ::= ASSIGNATION 
            {
              SymbolBase RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolAssign v = (SymbolAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HEADER_SEGMENT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // HEADER_SEGMENT ::= SWAP 
            {
              SymbolBase RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolSwap v = (SymbolSwap)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HEADER_SEGMENT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // HEADER_SEGMENT ::= FUNCTION_CALL 
            {
              SymbolBase RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolFuncCall v = (SymbolFuncCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HEADER_SEGMENT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FUNCTION_CALL ::= VARIABLE L_PAREN PARAMS R_PAREN 
            {
              SymbolFuncCall RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolVar v1 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolParams v2 = (SymbolParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolFuncCall(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PARAMS ::= OPERATION MORE_PARAMS 
            {
              SymbolParams RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperation v1 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolParams v2 = (SymbolParams)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolParams(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PARAMS ::= 
            {
              SymbolParams RESULT =null;
		 RESULT = new SymbolParams(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // MORE_PARAMS ::= COMMA OPERATION MORE_PARAMS 
            {
              SymbolParams RESULT =null;
		Location v1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location v1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperation v1 = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location v2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location v2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolParams v2 = (SymbolParams)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolParams(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MORE_PARAMS",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // MORE_PARAMS ::= 
            {
              SymbolParams RESULT =null;
		 RESULT = new SymbolParams(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MORE_PARAMS",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // RETURN ::= RES_RETURN OPERATION 
            {
              SymbolReturn RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperation v = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolReturn(v, rxleft.getLine(), rxleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // RETURN ::= RES_RETURN 
            {
              SymbolReturn RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolReturn(rxleft.getLine(), rxleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IN ::= RES_IN L_PAREN VARIABLE R_PAREN 
            {
              SymbolIn RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolVar v = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolIn(v, ixleft.getLine(), ixleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OUT ::= RES_OUT L_PAREN OPERATION R_PAREN 
            {
              SymbolOut RESULT =null;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperation v = (SymbolOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolOut(v, oxleft.getLine(), oxleft.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
