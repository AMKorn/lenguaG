/**
 * Asignatura: 21780 - Compiladores
 * Miembros:
 * 	- Román Colom, Marc
 * 	- Korn, Andreas Manuel
 * 	- Vilella Candia, Joan 
 *********************************************************
 * Para compilar este código es necesario hacerlo con CUP:
 *
 * java -jar java-cup-11b.jar lenguaG.cup
 */
package lenguag.syntactic;

import java_cup.runtime.*;
import lenguag.syntactic.symbols.*;

class Parser;

/**
 ** Aquí es podria posar un codi 'ad hoc' però en aquest cas no és necessari.
parser code {:
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
:}
**/

/**
 ** També aquí es poden afegir accions a realitzar quan es requereix un token.
scan with {:     next_token(); :}
**/

// Symbols

terminal                        RES_MAIN, CONSTANT, NOT, TYPE_INTEGER, TYPE_FLOAT, TYPE_CHARACTER, TYPE_BOOLEAN;
terminal                        RES_IF, RES_ELSE, RES_WHILE, RES_FOR, RES_RETURN;
terminal                        L_PAREN, R_PAREN, L_KEY, R_KEY, L_BRACKET, R_BRACKET, EQUAL, COMMA, ENDLINE;
terminal                        OP_SWAP, ADD, SUB, PROD, DIV, MOD, OR, AND, EQUALS, BIGGER, BEQ, LESSER, LEQ, NEQ;
terminal     String             IDENTIFIER;
terminal     Integer            INTEGER;
terminal     Float              FLOAT;
terminal     Character          CHARACTER;
terminal     Boolean            BOOLEAN;
non terminal SymbolBody         BODY;
non terminal SymbolDecs         DECLARATIONS;
non terminal SymbolDec          DECLARATION;
non terminal SymbolDecCont      CONT_DECLARATION;
non terminal SymbolMain         MAIN;
non terminal SymbolArgs         ARGS;
non terminal SymbolArg          ARG;
non terminal SymbolMoreArgs     MORE_ARGS;
non terminal SymbolInstrs       INSTRUCTIONS;
non terminal SymbolInstr        INSTRUCTION;
non terminal SymbolFunc         FUNCTION;
non terminal SymbolType         TYPE;
non terminal SymbolVar          VARIABLE;
non terminal SymbolInit         INITIALIZATION;
non terminal SymbolExpr         EXPRESSION;
non terminal SymbolAssign       ASSIGNATION;
non terminal SymbolSwap         SWAP;
non terminal SymbolReturn       RETURN;
non terminal SymbolIn           IN;
non terminal SymbolOut          OUT;
non terminal SymbolOper         OPERATION;
non terminal SymbolValue        VALUE;
non terminal SymbolOp           OP;
non terminal SymbolOpRel        OP_REL;
non terminal SymbolFixedVal     FIXED_VALUE;
non terminal SymbolArrSuff      ARRAY_SUFFIX;
non terminal SymbolList         LIST;
non terminal SymbolContList     CONT_LIST;
non terminal SymbolCond         CONDITION;
non terminal SymbolIf           IF;
non terminal SymbolElse         ELSE;
non terminal SymbolLoop         LOOP;
non terminal SymbolFor          FOR;
non terminal SymbolForHeader    FOR_HEADER;
non terminal SymbolHeaderSeg    HEADER_SEGMENT;
non terminal SymbolFuncCall     FUNCTION_CALL;
non terminal SymbolParams       PARAMS;
non terminal SymbolParam        PARAM;
non terminal SymbolMoreParams   MORE_PARAMS;

precedence left  PROD, DIV, MOD, ADD, SUB;
precedence left  AND, OR;

// Grammar

start with BODY;

BODY ::=  DECLARATIONS:v1 MAIN:v2     {: RESULT = new SymbolBody(v1, v2); :};

/*
BODY -> DECLARATIONS MAIN.

MAIN -> main L_PAREN ARGS R_PAREN L_KEY INSTRUCTIONS R_KEY.

DECLARATIONS -> DECLARATION DECLARATIONS 
    | FUNCTION DECLARATIONS 
    | .

DECLARATION -> CONSTANT CONT_DECLARATION
    | CONT_DECLARATION.

CONT_DECLARATION ->	TYPE VARIABLE INITIALIZATION
    | TYPE VARIABLE.

INITIALIZATION -> EQUAL EXPRESSION.

FUNCTION -> TYPE VARIABLE L_PAREN ARGS R_PAREN L_KEY INSTRUCTIONS R_KEY.

ARGS -> ARG MORE_ARGS
    | .

MORE_ARGS -> COMMA ARG
    | .

ARG -> TYPE VARIABLE.

INSTRUCTIONS -> INSTRUCTION INSTRUCTIONS
    | .

INSTRUCTION -> DECLARATION ENDLINE
    | ASSIGNATION ENDLINE
    | SWAP ENDLINE
    | FUNCTION_CALL ENDLINE
    | RETURN ENDLINE
    | IF
    | LOOP
    | FOR
    | IN
    | OUT.

ASSIGNATION -> VARIABLE EQUAL OPERATION 
    | VARIABLE EQUAL EXPRESSION.

SWAP -> VARIABLE <<>> VARIABLE.

EXPRESSION -> VALUE
    | L_PAREN EXPRESSION R_PAREN
    | L_PAREN OPERATION R_PAREN
    | NOT EXPRESSION.

OPERATION -> EXPRESSION OP EXPRESSION.

OP -> ADDITION
    | SUBSTRACTION
    | PRODUCT
    | DIVISION
    | MODULE
    | OR
    | AND
    | OP_REL.

OP_REL -> EQUALS
    | BIGGER
    | BEQ
    | LESSER
    | LEQ
    | NEQ.

VALUE -> VARIABLE
    | FIXED_VALUE
    | FUNCTION_CALL.

VARIABLE -> IDENTIFIER ARRAY_SUFFIX.

ARRAY_SUFFIX -> L_BRACKET VARIABLE R_BRACKET ARRAY_SUFFIX # variable must be integer
    | .

FIXED_VALUE -> INTEGER
    | FLOAT
    | CHARACTER
    | LIST
    | BOOLEAN.

TYPE -> TYPE_INTEGER ARRAY_SUFFIX
    | TYPE_FLOAT ARRAY_SUFFIX
    | TYPE_CHARACTER ARRAY_SUFFIX
    | TYPE_BOOLEAN ARRAY_SUFFIX.

LIST -> L_BRACKET VALUE CONT_LIST.
CONT_LIST -> COMMA VALUE CONT_LIST
    | R_BRACKET.

CONDITION -> EXPRESSION
    | OPERATION.

IF -> if L_PAREN CONDITION R_PAREN L_KEY INSTRUCTIONS R_KEY ELSE.
ELSE -> else if L_PAREN CONDITION R_PAREN L_KEY INSTRUCTIONS R_KEY ELSE
    | else L_KEY INSTRUCTIONS R_KEY
    | .

LOOP -> while L_PAREN CONDITION R_PAREN L_KEY INSTRUCTIONS R_KEY.

FOR -> FOR_HEADER L_KEY INSTRUCTIONS R_KEY.

FOR_HEADER -> for L_PAREN HEADER_SEGMENT ENDLINE CONDITION ENDLINE HEADER_SEGMENT R_PAREN.

HEADER_SEGMENT -> DECLARATION 
    | ASSIGNATION 
    | SWAP 
    | FUNCTION_CALL. # Quitar si no implementamos pasar por referencia

FUNCTION_CALL -> VARIABLE L_PAREN PARAMS R_PAREN.

PARAMS -> PARAM MORE_PARAMS
    | .

MORE_PARAMS -> COMMA PARAM
    | .

PARAM -> VALUE.

RETURN -> return EXPRESSION
    | return OPERATION
    | return.

IN -> in L_PAREN PARAM R_PAREN.

OUT -> out L_PAREN PARAM R_PAREN.
************************************************************************************************************************************
E ::=  T:v1 Ep:v2       {: RESULT = new SymbolE((Integer)v1.value, v2);  :}
     ;

Ep ::= ADD T:v1 Ep:v2   {: RESULT = new SymbolEp(ParserSym.ADD, (Integer)v1.value, v2); :}
     | SUB T:v1 Ep:v2   {: RESULT = new SymbolEp(ParserSym.SUB, (Integer)v1.value, v2); :} 
     |                  {: RESULT = new SymbolEp(); :}
     ;


T ::=  F:v1 Tp:v2       {: RESULT = new SymbolT((Integer)v1.value, v2);     :}
     ;

Tp ::= MUL F:v1 Tp:v2   {: RESULT = new SymbolTp(ParserSym.MUL, (Integer)v1.value, v2); :}
     | DIV F:v1 Tp:v2   {: RESULT = new SymbolTp(ParserSym.DIV, (Integer)v1.value, v2); :}
     | MOD F:v1 Tp:v2   {: RESULT = new SymbolTp(ParserSym.MOD, (Integer)v1.value, v2); :}
     |                  {: RESULT = new SymbolTp(); :}
     ;

F ::= LPAREN E:v RPAREN {: RESULT = new SymbolF((Integer)v.value);     :}
     | valor:v          {: RESULT = new SymbolF(Integer.parseInt(v));  :}
     ;*/