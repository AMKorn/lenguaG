/**
 * Asignatura: 21780 - Compiladores
 * Miembros:
 * 	- Korn, Andreas Manuel
 * 	- Román Colom, Marc
 * 	- Vilella Candia, Joan 
 *********************************************************
 * Para compilar este código es necesario hacerlo con CUP:
 *
 * java -jar java-cup-11b.jar lenguaG.cup
 */
package lenguag.syntactic;

import lenguag.*;
import lenguag.syntactic.symbols.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;

class Parser;

/**
 ** Aquí es podria posar un codi 'ad hoc' però en aquest cas no és necessari.
parser code {:
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
:}
**/
parser code {:

    public boolean thereIsError = false;

    /**
     * error treatment methods override 
     **/

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        report_error("Catastrophical syntactical error", cur_token);
        done_parsing();        
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        report_error("Syntactical error", cur_token);
    }

    @Override
    public void report_error(String message, Object info) {
        thereIsError = true;

        String msg = " !! ";
        msg += message;
        if (info instanceof Symbol) {
            ComplexSymbol token = (ComplexSymbol)info;
            String tokenName = token.getName();
            // If the name of the token equals the parser symbol for error, the error was lexical and should not be reported.
            if(tokenName == ParserSym.terminalNames[ParserSym.error]) return;
            msg += ": Unexpected " + tokenName;
            
            Location l = token.getLeft();
            if(token.value != null){
                msg += ": " + token.value;
            }

            if (l != null) {
                msg += " at position [line: " + l.getLine() + ", column: " + l.getColumn() + "]";
            }
        }
        
        System.err.println(msg);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Catastrophical error ("+message+")", info);
        done_parsing();
    }

:};

/**
 ** També aquí es poden afegir accions a realitzar quan es requereix un token.
scan with {:     next_token(); :}
**/

// Symbols

terminal                        RES_MAIN, CONSTANT, NOT, TYPE_INTEGER, TYPE_CHARACTER, TYPE_BOOLEAN, TYPE_VOID;
terminal                        RES_IF, RES_ELSE, RES_WHILE, RES_FOR, RES_RETURN, RES_IN, RES_OUT;
terminal                        L_PAREN, R_PAREN, L_KEY, R_KEY, L_BRACKET, R_BRACKET, EQUAL, COMMA, ENDLINE;
terminal                        OP_SWAP, ADD, SUB, PROD, DIV, MOD, OR, AND, IS_EQUAL, BIGGER, BEQ, LESSER, LEQ, NEQ;
terminal     String             IDENTIFIER;
terminal     Integer            INTEGER;
terminal     Character          CHARACTER;
terminal     Boolean            BOOLEAN;
terminal     String             STRING;
non terminal SymbolBody         BODY;
non terminal SymbolDecs         DECLARATIONS;
non terminal SymbolDec          DECLARATION;
non terminal SymbolDecCont      CONT_DECLARATION;
non terminal SymbolMain         MAIN;
non terminal SymbolArgs         ARGS, MORE_ARGS;
non terminal SymbolArg          ARG;
non terminal SymbolInstrs       INSTRUCTIONS;
non terminal SymbolInstr        INSTRUCTION;
non terminal SymbolFunc         FUNCTION;
non terminal SymbolType         TYPE;
non terminal SymbolVar          VARIABLE;
non terminal SymbolAssign       ASSIGNATION;
non terminal SymbolSwap         SWAP;
non terminal SymbolReturn       RETURN;
non terminal SymbolIn           IN;
non terminal SymbolOut          OUT;
non terminal SymbolOperation    OPERATION;
non terminal SymbolOperand      OPERAND;
non terminal SymbolValue        VALUE;
non terminal SymbolOp           OP, OP_REL;
non terminal Object             FIXED_VALUE;
non terminal SymbolArrSuff      ARRAY_SUFFIX;
non terminal SymbolList         LIST, CONT_LIST;
non terminal SymbolIf           IF;
non terminal SymbolElse         ELSE;
non terminal SymbolLoop         LOOP;
non terminal SymbolFor          FOR;
non terminal SymbolFuncCall     FUNCTION_CALL;
non terminal SymbolParams       PARAMS, MORE_PARAMS;
non terminal SymbolBase         HEADER_SEGMENT;

precedence left  PROD, DIV, MOD, ADD, SUB;
precedence left  AND, OR;

// Grammar

start with BODY;

BODY ::= DECLARATIONS:v1 MAIN:v2
            {: int line, column;
                if(v1xleft == null) { line = v2xleft.getLine(); column = v2xleft.getColumn(); }
                else { line = v1xleft.getLine(); column = v1xleft.getColumn(); }
                RESULT = new SymbolBody(v1, v2, line, column);
            :}
       | DECLARATIONS
            {: 
                // Error case
                report_error("No main found", null); 
            :}
       ;

MAIN ::= RES_MAIN L_KEY INSTRUCTIONS:v R_KEY                            {: RESULT = new SymbolMain(v, vxleft.getLine(), vxleft.getColumn()); :}
       ;

DECLARATIONS ::= DECLARATION:v1 ENDLINE DECLARATIONS:v2                 {: RESULT = new SymbolDecs(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); :}
               | FUNCTION:v1 DECLARATIONS:v2                            {: RESULT = new SymbolDecs(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); :}
               |                                                        {: RESULT = new SymbolDecs(); :}
               | error DECLARATIONS:v                                   {: RESULT = new SymbolDecs(null, v, vxleft.getLine(), vxleft.getColumn()); /* If there's an error in a declaration, we go to the next one. */ :}
               ;

DECLARATION ::= CONSTANT:c CONT_DECLARATION:v                           {: RESULT = new SymbolDec(v, true, cxleft.getLine(), cxleft.getColumn()); :}
              | CONT_DECLARATION:v                                      {: RESULT = new SymbolDec(v, vxleft.getLine(), vxleft.getColumn()); :}
              ;

CONT_DECLARATION ::= TYPE:v1 IDENTIFIER:v2 EQUAL OPERATION:v3           {: RESULT = new SymbolDecCont(v1, v2, v3); :}
                   | TYPE:v1 IDENTIFIER:v2                              {: RESULT = new SymbolDecCont(v1, v2); :}
                   ;

FUNCTION ::= TYPE:v1 IDENTIFIER:v2 L_PAREN ARGS:v3 R_PAREN L_KEY INSTRUCTIONS:v4 R_KEY 
                                                                        {: RESULT = new SymbolFunc(v1, v2, v3, v4, v1xleft.getLine(), v1xleft.getColumn()); :}
           ;

ARGS ::= ARG:v1 MORE_ARGS:v2                                            {: RESULT = new SymbolArgs(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); :}
       |                                                                {: RESULT = new SymbolArgs(); :}
       ;

MORE_ARGS ::= COMMA ARG:v1 MORE_ARGS:v2                                 {: RESULT = new SymbolArgs(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); :}
            |                                                           {: RESULT = new SymbolArgs(); :}
            ;

ARG ::= TYPE:v1 IDENTIFIER:v2                                           {: RESULT = new SymbolArg(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); :}
      ;

INSTRUCTIONS ::= INSTRUCTION:v1 INSTRUCTIONS:v2                         {: RESULT = new SymbolInstrs(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); :}
               |                                                        {: RESULT = new SymbolInstrs(); :}
               ;

INSTRUCTION ::= DECLARATION:v ENDLINE                                   {: RESULT = v; :}
              | ASSIGNATION:v ENDLINE                                   {: RESULT = v; :}
              | SWAP:v ENDLINE                                          {: RESULT = v; :}
              | FUNCTION_CALL:v ENDLINE                                 {: RESULT = v; :}
              | RETURN:v ENDLINE                                        {: RESULT = v; :}
              | IF:v                                                    {: RESULT = v; :}
              | LOOP:v                                                  {: RESULT = v; :}
              | FOR:v                                                   {: RESULT = v; :}
              | IN:v ENDLINE                                            {: RESULT = v; :}
              | OUT:v ENDLINE                                           {: RESULT = v; :}
              | error:v ENDLINE                                         {: RESULT = new SymbolInstr("Error", 0, SymbolInstr.instructionType.error, vxleft.getLine(), vxleft.getColumn()); /*Error treatment*/ :}
              | error:v R_KEY                                           {: RESULT = new SymbolInstr("Error", 0, SymbolInstr.instructionType.error, vxleft.getLine(), vxleft.getColumn()); /*Error treatment*/ :}
              ;

ASSIGNATION ::= VARIABLE:v1 EQUAL OPERATION:v2                          {: RESULT = new SymbolAssign(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); :} 
              ;

SWAP ::= VARIABLE:v1 OP_SWAP VARIABLE:v2                                {: RESULT = new SymbolSwap(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); :}
       ;

OPERATION ::= OPERAND:v1 OP:v2 OPERAND:v3                               {: RESULT = new SymbolOperation(v1, v2, v3, v1xleft.getLine(), v1xleft.getColumn()); :}
            | OPERAND:v1                                                {: RESULT = new SymbolOperation(v1, v1xleft.getLine(), v1xleft.getColumn()); :}
            ;

OPERAND ::= VALUE:v                                                     {: RESULT = new SymbolOperand(v, vxleft.getLine(), vxleft.getColumn()); :}
          | L_PAREN OPERATION:v R_PAREN                                 {: RESULT = new SymbolOperand(v, vxleft.getLine(), vxleft.getColumn()); :}
          | NOT:n OPERAND:v                                             {: v.negate(); v.line = nxleft.getLine(); v.column = nxleft.getColumn(); RESULT = v; :}
          | SUB:n OPERAND:v                                             {: v.negate(); v.line = nxleft.getLine(); v.column = nxleft.getColumn(); RESULT = v; :}
          ;

OP ::= ADD                                                              {: RESULT = new SymbolOp(ParserSym.ADD); :}
     | SUB                                                              {: RESULT = new SymbolOp(ParserSym.SUB); :}
     | PROD                                                             {: RESULT = new SymbolOp(ParserSym.PROD); :}
     | DIV                                                              {: RESULT = new SymbolOp(ParserSym.DIV); :}
     | MOD                                                              {: RESULT = new SymbolOp(ParserSym.MOD); :}
     | OR                                                               {: RESULT = new SymbolOp(ParserSym.OR); :}
     | AND                                                              {: RESULT = new SymbolOp(ParserSym.AND); :}
     | OP_REL:v                                                         {: RESULT = v; :}
     ;

OP_REL ::= IS_EQUAL                                                     {: RESULT = new SymbolOp(ParserSym.IS_EQUAL, true); :}
         | BIGGER                                                       {: RESULT = new SymbolOp(ParserSym.BIGGER, true); :}
         | BEQ                                                          {: RESULT = new SymbolOp(ParserSym.BEQ, true); :}
         | LESSER                                                       {: RESULT = new SymbolOp(ParserSym.LESSER, true); :}
         | LEQ                                                          {: RESULT = new SymbolOp(ParserSym.LEQ, true); :}
         | NEQ                                                          {: RESULT = new SymbolOp(ParserSym.NEQ, true); :}
         ;

VALUE ::= VARIABLE:v                                                    {: RESULT = new SymbolValue(v, vxleft.getLine(), vxleft.getColumn()); :}
        | FIXED_VALUE:v                                                 {: RESULT = new SymbolValue(v, vxleft.getLine(), vxleft.getColumn()); :}
        | FUNCTION_CALL:v                                               {: RESULT = new SymbolValue(v, vxleft.getLine(), vxleft.getColumn()); :}
        ;

VARIABLE ::= IDENTIFIER:v1 ARRAY_SUFFIX:v2                              {: RESULT = new SymbolVar(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); :}
           ;

ARRAY_SUFFIX ::= L_BRACKET:b OPERATION:v1 R_BRACKET ARRAY_SUFFIX:v2     {: RESULT = new SymbolArrSuff(v1, v2, bxleft.getLine(), bxleft.getColumn()); :}
               |                                                        {: RESULT = new SymbolArrSuff(); :}
               ;

FIXED_VALUE ::= INTEGER:v                                               {: RESULT = v; /* Returns Integer */ :} 
              | CHARACTER:v                                             {: RESULT = v; /* Returns Character */ :}
              | LIST:v                                                  {: RESULT = v; /* Returns SymbolList */ :}
              | BOOLEAN:v                                               {: RESULT = v; /* Returns Integer */ :}
              ;

TYPE ::= TYPE_INTEGER                                                   {: RESULT = new SymbolType(ParserSym.TYPE_INTEGER); :}
       | TYPE_CHARACTER                                                 {: RESULT = new SymbolType(ParserSym.TYPE_CHARACTER); :}
       | TYPE_BOOLEAN                                                   {: RESULT = new SymbolType(ParserSym.TYPE_BOOLEAN); :}
       | TYPE_VOID                                                      {: RESULT = new SymbolType(ParserSym.TYPE_VOID); :}
       | TYPE:v L_BRACKET R_BRACKET                                     {: RESULT = new SymbolType(Constants.TYPE_ARRAY, v); :}
       ;

LIST ::= L_BRACKET:b OPERATION:v1 CONT_LIST:v2                          {: RESULT = new SymbolList(v1, v2, bxleft.getLine(), bxleft.getColumn()); :}
       | STRING:v
            {: 
                v = v.substring(1, v.length()-1);
                RESULT = new SymbolList(v, vxleft.getLine(), vxleft.getColumn()); 
            :}
       ;

CONT_LIST ::= COMMA OPERATION:v1 CONT_LIST:v2                           {: RESULT = new SymbolList(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); :}
            | R_BRACKET                                                 {: RESULT = new SymbolList(); :}
            ;
//            | error R_BRACKET;

IF ::= RES_IF:i L_PAREN OPERATION:v1 R_PAREN L_KEY INSTRUCTIONS:v2 R_KEY ELSE:v3 
                                                                        {: RESULT = new SymbolIf(v1, v2, v3, ixleft.getLine(), ixleft.getColumn()); :}
     ;

ELSE ::= RES_ELSE:e IF:v                                                {: RESULT = new SymbolElse(v, exleft.getLine(), exleft.getColumn()); :}
       | RES_ELSE:e L_KEY INSTRUCTIONS:v R_KEY                          {: RESULT = new SymbolElse(v, exleft.getLine(), exleft.getColumn()); :}
       |                                                                {: RESULT = new SymbolElse(); :}
       ;

LOOP ::= RES_WHILE:w L_PAREN OPERATION:v1 R_PAREN L_KEY INSTRUCTIONS:v2 R_KEY 
                                                                        {: RESULT = new SymbolLoop(v1, v2, wxleft.getLine(), wxleft.getColumn()); :}
       ;

FOR ::= RES_FOR:f L_PAREN HEADER_SEGMENT:v1 ENDLINE OPERATION:v2 ENDLINE HEADER_SEGMENT:v3 R_PAREN L_KEY INSTRUCTIONS:v4 R_KEY
                                                                        {: RESULT = new SymbolFor(v1, v2, v3, v4, fxleft.getLine(), fxleft.getColumn()); :}
      ;

HEADER_SEGMENT ::= DECLARATION:v                                        {: RESULT = v; :}
                 | ASSIGNATION:v                                        {: RESULT = v; :}
                 | SWAP:v                                               {: RESULT = v; :}
                 | FUNCTION_CALL:v                                      {: RESULT = v; :}
                 ; 
                    // ^- Quitar FUNCTION_CALL si no implementamos pasar por referencia

FUNCTION_CALL ::= IDENTIFIER:v1 L_PAREN PARAMS:v2 R_PAREN                 {: RESULT = new SymbolFuncCall(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); :}
                ;

PARAMS ::= OPERATION:v1 MORE_PARAMS:v2                                  {: RESULT = new SymbolParams(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); :}
         |                                                              {: RESULT = new SymbolParams(); :}
         ;

MORE_PARAMS ::= COMMA OPERATION:v1 MORE_PARAMS:v2                       {: RESULT = new SymbolParams(v1, v2, v1xleft.getLine(), v1xleft.getColumn()); :}
              |                                                         {: RESULT = new SymbolParams(); :}
              ;

RETURN ::= RES_RETURN:r OPERATION:v                                     {: RESULT = new SymbolReturn(v, rxleft.getLine(), rxleft.getColumn()); :}
         | RES_RETURN:r                                                 {: RESULT = new SymbolReturn(rxleft.getLine(), rxleft.getColumn()); :}
         ;

IN ::= RES_IN:i L_PAREN VARIABLE:v R_PAREN                              {: RESULT = new SymbolIn(v, ixleft.getLine(), ixleft.getColumn()); :}
     ;

OUT ::= RES_OUT:o L_PAREN OPERATION:v R_PAREN                           {: RESULT = new SymbolOut(v, oxleft.getLine(), oxleft.getColumn()); :}
      ;
