int : TYPE_INTEGER
foo : IDENTIFIER
( : L_PAREN
) : R_PAREN
{ : L_KEY
int : TYPE_INTEGER
a : IDENTIFIER
= : EQUAL
1 : INTEGER
; : ENDLINE
int : TYPE_INTEGER
b : IDENTIFIER
= : EQUAL
2 : INTEGER
; : ENDLINE
if : RES_IF
( : L_PAREN
a : IDENTIFIER
< : LESSER
b : IDENTIFIER
) : R_PAREN
{ : L_KEY
return : RES_RETURN
1 : INTEGER
; : ENDLINE
} : R_KEY
else : RES_ELSE
if : RES_IF
( : L_PAREN
a : IDENTIFIER
> : BIGGER
b : IDENTIFIER
) : R_PAREN
{ : L_KEY
return : RES_RETURN
2 : INTEGER
; : ENDLINE
int : TYPE_INTEGER
c : IDENTIFIER
= : EQUAL
a : IDENTIFIER
+ : ADD
b : IDENTIFIER
; : ENDLINE
} : R_KEY
int : TYPE_INTEGER
c : IDENTIFIER
= : EQUAL
a : IDENTIFIER
+ : ADD
b : IDENTIFIER
; : ENDLINE
return : RES_RETURN
0 : INTEGER
; : ENDLINE
} : R_KEY
void : TYPE_VOID
bar : IDENTIFIER
( : L_PAREN
) : R_PAREN
{ : L_KEY
int : TYPE_INTEGER
a : IDENTIFIER
= : EQUAL
0 : INTEGER
; : ENDLINE
} : R_KEY
main : RES_MAIN
{ : L_KEY
int : TYPE_INTEGER
a : IDENTIFIER
= : EQUAL
foo : IDENTIFIER
( : L_PAREN
) : R_PAREN
; : ENDLINE
} : R_KEY
