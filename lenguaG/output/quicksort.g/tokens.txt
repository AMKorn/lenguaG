val : CONSTANT
int : TYPE_INTEGER
begin : IDENTIFIER
= : EQUAL
0 : INTEGER
; : ENDLINE
int : TYPE_INTEGER
end : IDENTIFIER
= : EQUAL
6 : INTEGER
; : ENDLINE
char : TYPE_CHARACTER
c : IDENTIFIER
= : EQUAL
'c' : CHARACTER
; : ENDLINE
bool : TYPE_BOOLEAN
t : IDENTIFIER
= : EQUAL
true : BOOLEAN
; : ENDLINE
int : TYPE_INTEGER
[ : L_BRACKET
] : R_BRACKET
intArray : IDENTIFIER
= : EQUAL
[ : L_BRACKET
5 : INTEGER
+ : ADD
end : IDENTIFIER
, : COMMA
9 : INTEGER
, : COMMA
4 : INTEGER
, : COMMA
6 : INTEGER
, : COMMA
5 : INTEGER
, : COMMA
3 : INTEGER
, : COMMA
9 : INTEGER
] : R_BRACKET
; : ENDLINE
int : TYPE_INTEGER
[ : L_BRACKET
] : R_BRACKET
[ : L_BRACKET
] : R_BRACKET
a : IDENTIFIER
= : EQUAL
[ : L_BRACKET
[ : L_BRACKET
0 : INTEGER
, : COMMA
1 : INTEGER
, : COMMA
2 : INTEGER
, : COMMA
3 : INTEGER
, : COMMA
4 : INTEGER
, : COMMA
5 : INTEGER
, : COMMA
6 : INTEGER
, : COMMA
7 : INTEGER
, : COMMA
8 : INTEGER
, : COMMA
9 : INTEGER
] : R_BRACKET
, : COMMA
[ : L_BRACKET
10 : INTEGER
, : COMMA
11 : INTEGER
, : COMMA
12 : INTEGER
, : COMMA
13 : INTEGER
, : COMMA
14 : INTEGER
, : COMMA
15 : INTEGER
, : COMMA
16 : INTEGER
, : COMMA
17 : INTEGER
, : COMMA
18 : INTEGER
, : COMMA
19 : INTEGER
] : R_BRACKET
] : R_BRACKET
; : ENDLINE
int : TYPE_INTEGER
partition : IDENTIFIER
( : L_PAREN
int : TYPE_INTEGER
[ : L_BRACKET
] : R_BRACKET
array : IDENTIFIER
, : COMMA
int : TYPE_INTEGER
begin : IDENTIFIER
, : COMMA
int : TYPE_INTEGER
end : IDENTIFIER
) : R_PAREN
{ : L_KEY
int : TYPE_INTEGER
pivot : IDENTIFIER
= : EQUAL
array : IDENTIFIER
[ : L_BRACKET
end : IDENTIFIER
] : R_BRACKET
; : ENDLINE
int : TYPE_INTEGER
i : IDENTIFIER
= : EQUAL
( : L_PAREN
begin : IDENTIFIER
- : SUB
1 : INTEGER
) : R_PAREN
; : ENDLINE
for : RES_FOR
( : L_PAREN
int : TYPE_INTEGER
j : IDENTIFIER
= : EQUAL
begin : IDENTIFIER
; : ENDLINE
j : IDENTIFIER
< : LESSER
end : IDENTIFIER
; : ENDLINE
j : IDENTIFIER
= : EQUAL
j : IDENTIFIER
+ : ADD
1 : INTEGER
) : R_PAREN
{ : L_KEY
if : RES_IF
( : L_PAREN
array : IDENTIFIER
[ : L_BRACKET
j : IDENTIFIER
] : R_BRACKET
<= : LEQ
pivot : IDENTIFIER
) : R_PAREN
{ : L_KEY
i : IDENTIFIER
= : EQUAL
i : IDENTIFIER
+ : ADD
1 : INTEGER
; : ENDLINE
array : IDENTIFIER
[ : L_BRACKET
i : IDENTIFIER
] : R_BRACKET
<<>> : OP_SWAP
array : IDENTIFIER
[ : L_BRACKET
j : IDENTIFIER
] : R_BRACKET
; : ENDLINE
} : R_KEY
} : R_KEY
array : IDENTIFIER
[ : L_BRACKET
i : IDENTIFIER
+ : ADD
1 : INTEGER
] : R_BRACKET
<<>> : OP_SWAP
array : IDENTIFIER
[ : L_BRACKET
end : IDENTIFIER
] : R_BRACKET
; : ENDLINE
return : RES_RETURN
i : IDENTIFIER
+ : ADD
1 : INTEGER
; : ENDLINE
} : R_KEY
void : TYPE_VOID
quickSort : IDENTIFIER
( : L_PAREN
int : TYPE_INTEGER
[ : L_BRACKET
] : R_BRACKET
array : IDENTIFIER
, : COMMA
int : TYPE_INTEGER
begin : IDENTIFIER
, : COMMA
int : TYPE_INTEGER
end : IDENTIFIER
) : R_PAREN
{ : L_KEY
if : RES_IF
( : L_PAREN
begin : IDENTIFIER
< : LESSER
end : IDENTIFIER
) : R_PAREN
{ : L_KEY
int : TYPE_INTEGER
partitionIndex : IDENTIFIER
= : EQUAL
partition : IDENTIFIER
( : L_PAREN
array : IDENTIFIER
, : COMMA
begin : IDENTIFIER
, : COMMA
end : IDENTIFIER
) : R_PAREN
; : ENDLINE
quickSort : IDENTIFIER
( : L_PAREN
array : IDENTIFIER
, : COMMA
begin : IDENTIFIER
, : COMMA
partitionIndex : IDENTIFIER
- : SUB
1 : INTEGER
) : R_PAREN
; : ENDLINE
quickSort : IDENTIFIER
( : L_PAREN
array : IDENTIFIER
, : COMMA
partitionIndex : IDENTIFIER
+ : ADD
1 : INTEGER
, : COMMA
end : IDENTIFIER
) : R_PAREN
; : ENDLINE
} : R_KEY
} : R_KEY
main : RES_MAIN
{ : L_KEY
} : R_KEY
