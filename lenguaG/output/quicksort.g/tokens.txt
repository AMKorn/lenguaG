val : CONSTANT
int : TYPE_INTEGER
begin : IDENTIFIER
= : EQUAL
0 : INTEGER
; : ENDLINE
int : TYPE_INTEGER
end : IDENTIFIER
= : EQUAL
6 : INTEGER
; : ENDLINE
char : TYPE_CHARACTER
c : IDENTIFIER
= : EQUAL
'c' : CHARACTER
; : ENDLINE
bool : TYPE_BOOLEAN
t : IDENTIFIER
= : EQUAL
begin : IDENTIFIER
< : LESSER
end : IDENTIFIER
; : ENDLINE
int : TYPE_INTEGER
[ : L_BRACKET
] : R_BRACKET
intArray : IDENTIFIER
= : EQUAL
[ : L_BRACKET
begin : IDENTIFIER
, : COMMA
1 : INTEGER
, : COMMA
2 : INTEGER
, : COMMA
3 : INTEGER
, : COMMA
4 : INTEGER
, : COMMA
end : IDENTIFIER
+ : ADD
1 : INTEGER
] : R_BRACKET
; : ENDLINE
int : TYPE_INTEGER
endValue : IDENTIFIER
= : EQUAL
intArray : IDENTIFIER
[ : L_BRACKET
end : IDENTIFIER
] : R_BRACKET
; : ENDLINE
int : TYPE_INTEGER
[ : L_BRACKET
] : R_BRACKET
[ : L_BRACKET
] : R_BRACKET
a : IDENTIFIER
= : EQUAL
[ : L_BRACKET
[ : L_BRACKET
0 : INTEGER
, : COMMA
1 : INTEGER
, : COMMA
2 : INTEGER
, : COMMA
3 : INTEGER
, : COMMA
4 : INTEGER
, : COMMA
5 : INTEGER
, : COMMA
6 : INTEGER
, : COMMA
7 : INTEGER
, : COMMA
8 : INTEGER
, : COMMA
9 : INTEGER
] : R_BRACKET
, : COMMA
[ : L_BRACKET
10 : INTEGER
, : COMMA
11 : INTEGER
, : COMMA
12 : INTEGER
, : COMMA
13 : INTEGER
, : COMMA
14 : INTEGER
, : COMMA
15 : INTEGER
, : COMMA
16 : INTEGER
, : COMMA
17 : INTEGER
, : COMMA
18 : INTEGER
, : COMMA
19 : INTEGER
] : R_BRACKET
] : R_BRACKET
; : ENDLINE
int : TYPE_INTEGER
aEnd : IDENTIFIER
= : EQUAL
a : IDENTIFIER
[ : L_BRACKET
1 : INTEGER
] : R_BRACKET
[ : L_BRACKET
9 : INTEGER
] : R_BRACKET
; : ENDLINE
char : TYPE_CHARACTER
[ : L_BRACKET
] : R_BRACKET
string : IDENTIFIER
= : EQUAL
"Esto es un string" : STRING
; : ENDLINE
int : TYPE_INTEGER
partition : IDENTIFIER
( : L_PAREN
int : TYPE_INTEGER
[ : L_BRACKET
] : R_BRACKET
array : IDENTIFIER
, : COMMA
int : TYPE_INTEGER
begin : IDENTIFIER
, : COMMA
int : TYPE_INTEGER
end : IDENTIFIER
) : R_PAREN
{ : L_KEY
return : RES_RETURN
1 : INTEGER
; : ENDLINE
} : R_KEY
void : TYPE_VOID
quickSort : IDENTIFIER
( : L_PAREN
int : TYPE_INTEGER
[ : L_BRACKET
] : R_BRACKET
array : IDENTIFIER
, : COMMA
int : TYPE_INTEGER
begin : IDENTIFIER
, : COMMA
int : TYPE_INTEGER
end : IDENTIFIER
) : R_PAREN
{ : L_KEY
} : R_KEY
main : RES_MAIN
{ : L_KEY
intArray : IDENTIFIER
= : EQUAL
[ : L_BRACKET
5 : INTEGER
, : COMMA
9 : INTEGER
, : COMMA
4 : INTEGER
, : COMMA
6 : INTEGER
, : COMMA
5 : INTEGER
, : COMMA
3 : INTEGER
] : R_BRACKET
; : ENDLINE
quickSort : IDENTIFIER
( : L_PAREN
intArray : IDENTIFIER
, : COMMA
begin : IDENTIFIER
, : COMMA
end : IDENTIFIER
) : R_PAREN
; : ENDLINE
out : RES_OUT
( : L_PAREN
"El array ordenado es: " : STRING
) : R_PAREN
; : ENDLINE
out : RES_OUT
( : L_PAREN
intArray : IDENTIFIER
) : R_PAREN
; : ENDLINE
out : RES_OUT
( : L_PAREN
"\n" : STRING
) : R_PAREN
; : ENDLINE
} : R_KEY
