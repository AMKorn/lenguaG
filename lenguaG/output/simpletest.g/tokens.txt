int : TYPE_INTEGER
a : IDENTIFIER
= : EQUAL
1 : INTEGER
; : ENDLINE
int : TYPE_INTEGER
b : IDENTIFIER
= : EQUAL
2 : INTEGER
; : ENDLINE
int : TYPE_INTEGER
c : IDENTIFIER
; : ENDLINE
int : TYPE_INTEGER
foo : IDENTIFIER
( : L_PAREN
int : TYPE_INTEGER
a : IDENTIFIER
, : COMMA
int : TYPE_INTEGER
b : IDENTIFIER
, : COMMA
bool : TYPE_BOOLEAN
cond : IDENTIFIER
) : R_PAREN
{ : L_KEY
if : RES_IF
( : L_PAREN
cond : IDENTIFIER
) : R_PAREN
{ : L_KEY
int : TYPE_INTEGER
c : IDENTIFIER
= : EQUAL
a : IDENTIFIER
+ : ADD
b : IDENTIFIER
; : ENDLINE
return : RES_RETURN
c : IDENTIFIER
; : ENDLINE
} : R_KEY
return : RES_RETURN
0 : INTEGER
; : ENDLINE
} : R_KEY
main : RES_MAIN
{ : L_KEY
c : IDENTIFIER
= : EQUAL
foo : IDENTIFIER
( : L_PAREN
a : IDENTIFIER
, : COMMA
b : IDENTIFIER
, : COMMA
true : BOOLEAN
) : R_PAREN
; : ENDLINE
out : RES_OUT
( : L_PAREN
c : IDENTIFIER
) : R_PAREN
; : ENDLINE
c : IDENTIFIER
= : EQUAL
foo : IDENTIFIER
( : L_PAREN
a : IDENTIFIER
, : COMMA
b : IDENTIFIER
, : COMMA
false : BOOLEAN
) : R_PAREN
; : ENDLINE
out : RES_OUT
( : L_PAREN
c : IDENTIFIER
) : R_PAREN
; : ENDLINE
} : R_KEY
